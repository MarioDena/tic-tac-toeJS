"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Node_1 = __importDefault(require("../nodes/basic-types/node/Node"));
var NodeFilter_1 = __importDefault(require("./NodeFilter"));
/**
 * The TreeWalker object represents the nodes of a document subtree and a position within them.
 */
var TreeWalker = /** @class */ (function () {
    /**
     * Constructor.
     *
     * @param {Node} root Root.
     * @param {number} [whatToShow] What to show.
     * @param {function} [filter] Filter.
     */
    function TreeWalker(root, whatToShow, filter) {
        if (whatToShow === void 0) { whatToShow = -1; }
        if (filter === void 0) { filter = null; }
        this.root = null;
        this.whatToShow = -1;
        this.filter = null;
        this.currentNode = null;
        if (!(root instanceof Node_1.default)) {
            throw new Error('Parameter 1 was not of type Node.');
        }
        this.root = root;
        this.whatToShow = whatToShow;
        this.filter = filter;
        this.currentNode = root;
    }
    /**
     * Moves the current Node to the first visible ancestor node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns null and the current node is not changed.
     *
     * @return {Node} Current node.
     */
    TreeWalker.prototype.parentNode = function () {
        if (this.currentNode !== this.root && this.currentNode && this.currentNode.parentNode) {
            this.currentNode = this.currentNode.parentNode;
            return this.currentNode;
        }
        return null;
    };
    /**
     * Moves the current Node to the first visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns null and the current node is not changed.
     *
     * @return {Node} Current node.
     */
    TreeWalker.prototype.firstChild = function () {
        var childNodes = this.currentNode ? this.currentNode.childNodes : [];
        if (childNodes.length > 0) {
            this.currentNode = childNodes[0];
            return this.filterNode(this.currentNode) ? this.currentNode : this.firstChild();
        }
        return null;
    };
    /**
     * Moves the current Node to the last visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, null is returned and the current node is not changed.
     *
     * @return {Node} Current node.
     */
    TreeWalker.prototype.lastChild = function () {
        var childNodes = this.currentNode ? this.currentNode.childNodes : [];
        if (childNodes.length > 0) {
            this.currentNode = childNodes[childNodes.length - 1];
            return this.filterNode(this.currentNode) ? this.currentNode : this.lastChild();
        }
        return null;
    };
    /**
     * Moves the current Node to its previous sibling, if any, and returns the found sibling. If there is no such node, return null and the current node is not changed.
     *
     * @return {Node} Current node.
     */
    TreeWalker.prototype.previousSibling = function () {
        if (this.currentNode !== this.root && this.currentNode) {
            var siblings = this.currentNode.parentNode.childNodes;
            var index = siblings.indexOf(this.currentNode);
            if (index > 0) {
                this.currentNode = siblings[index - 1];
                return this.filterNode(this.currentNode) ? this.currentNode : this.previousSibling();
            }
        }
        return null;
    };
    /**
     * Moves the current Node to its next sibling, if any, and returns the found sibling. If there is no such node, null is returned and the current node is not changed.
     *
     * @return {Node} Current node.
     */
    TreeWalker.prototype.nextSibling = function () {
        if (this.currentNode !== this.root && this.currentNode) {
            var siblings = this.currentNode.parentNode.childNodes;
            var index = siblings.indexOf(this.currentNode);
            if (index + 1 < siblings.length) {
                this.currentNode = siblings[index + 1];
                return this.filterNode(this.currentNode) ? this.currentNode : this.nextSibling();
            }
        }
        return null;
    };
    /**
     * Moves the current Node to the next visible node in the document order.
     *
     * @return {Node} Current node.
     */
    TreeWalker.prototype.nextNode = function () {
        if (!this.firstChild()) {
            while (!this.nextSibling() && this.parentNode()) { }
            this.currentNode = this.currentNode === this.root ? null : this.currentNode || null;
        }
        return this.currentNode;
    };
    /**
     * Moves the current Node to the previous visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns null and the current node is not changed.
     *
     * @return {Node} Current node.
     */
    TreeWalker.prototype.previousNode = function () {
        while (!this.previousSibling() && this.parentNode()) { }
        this.currentNode = this.currentNode === this.root ? null : this.currentNode || null;
        return this.currentNode;
    };
    /**
     * Filters a node.
     *
     * @param {Node} node Node.
     * @return {boolean} Child nodes.
     */
    TreeWalker.prototype.filterNode = function (node) {
        return this.filterWhatToShow(node) && (!this.filter || this.filter(node) === NodeFilter_1.default.FILTER_ACCEPT);
    };
    /**
     * Filters what to show.
     *
     * @param {Node} node Node.
     * @return {boolean} TRUE if the element should be shown.
     */
    TreeWalker.prototype.filterWhatToShow = function (node) {
        return this.whatToShow === NodeFilter_1.default.SHOW_ALL || !((1 << node.nodeType) & this.whatToShow);
    };
    return TreeWalker;
}());
exports.default = TreeWalker;
//# sourceMappingURL=TreeWalker.js.map