"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var CustomElementRegistry_1 = __importDefault(require("./custom-element/CustomElementRegistry"));
var Document_1 = __importDefault(require("./nodes/basic-types/document/Document"));
var Node_1 = __importDefault(require("./nodes/basic-types/node/Node"));
var NodeFilter_1 = __importDefault(require("./tree-walker/NodeFilter"));
var TextNode_1 = __importDefault(require("./nodes/basic-types/text-node/TextNode"));
var CommentNode_1 = __importDefault(require("./nodes/basic-types/comment-node/CommentNode"));
var ShadowRoot_1 = __importDefault(require("./nodes/basic-types/shadow-root/ShadowRoot"));
var Element_1 = __importDefault(require("./nodes/basic-types/element/Element"));
var HTMLElement_1 = __importDefault(require("./nodes/basic-types/html-element/HTMLElement"));
var HTMLTemplateElement_1 = __importDefault(require("./nodes/elements/template/HTMLTemplateElement"));
var HTMLFormElement_1 = __importDefault(require("./nodes/elements/form/HTMLFormElement"));
var HTMLInputElement_1 = __importDefault(require("./nodes/elements/input/HTMLInputElement"));
var HTMLTextAreaElement_1 = __importDefault(require("./nodes/elements/text-area/HTMLTextAreaElement"));
var DocumentFragment_1 = __importDefault(require("./nodes/basic-types/document-fragment/DocumentFragment"));
var TreeWalker_1 = __importDefault(require("./tree-walker/TreeWalker"));
var Event_1 = __importDefault(require("./event/Event"));
var CustomEvent_1 = __importDefault(require("./event/CustomEvent"));
var EventTarget_1 = __importDefault(require("./event/EventTarget"));
var URL_1 = __importDefault(require("./location/URL"));
var Location_1 = __importDefault(require("./location/Location"));
var EventTypes_json_1 = __importDefault(require("./event/EventTypes.json"));
var MutationObserver_1 = __importDefault(require("./mutation-observer/MutationObserver"));
var ShadowRootRenderOptions_1 = __importDefault(require("./shadow-root-renderer/ShadowRootRenderOptions"));
/**
 * Handles the Window.
 */
var Window = /** @class */ (function (_super) {
    __extends(Window, _super);
    /**
     * Constructor.
     */
    function Window() {
        var _this = _super.call(this) || this;
        // Global classes
        _this.Node = Node_1.default;
        _this.TextNode = TextNode_1.default;
        _this.CommentNode = CommentNode_1.default;
        _this.ShadowRoot = ShadowRoot_1.default;
        _this.HTMLElement = HTMLElement_1.default;
        _this.HTMLInputElement = HTMLInputElement_1.default;
        _this.HTMLFormElement = HTMLFormElement_1.default;
        _this.HTMLTextAreaElement = HTMLTextAreaElement_1.default;
        _this.HTMLTemplateElement = HTMLTemplateElement_1.default;
        _this.Element = Element_1.default;
        _this.DocumentFragment = DocumentFragment_1.default;
        _this.NodeFilter = NodeFilter_1.default;
        _this.TreeWalker = TreeWalker_1.default;
        _this.MutationObserver = MutationObserver_1.default;
        _this.Document = Document_1.default;
        _this.Event = Event_1.default;
        _this.CustomEvent = CustomEvent_1.default;
        _this.URL = URL_1.default;
        _this.Location = Location_1.default;
        _this.CustomElementRegistry = CustomElementRegistry_1.default;
        _this.Window = Window;
        _this.customElements = new CustomElementRegistry_1.default();
        _this.location = new Location_1.default();
        _this.navigator = { userAgent: 'happy-dom' };
        _this.console = typeof global !== undefined ? global.console : null;
        _this.self = _this;
        _this.window = _this;
        // Custom Properties (not part of HTML standard)
        _this.shadowRootRenderOptions = new ShadowRootRenderOptions_1.default();
        _this.document = new Document_1.default(_this);
        HTMLElement_1.default.ownerDocument = _this.document;
        Node_1.default.ownerDocument = _this.document;
        TextNode_1.default.ownerDocument = _this.document;
        for (var _i = 0, EventTypes_1 = EventTypes_json_1.default; _i < EventTypes_1.length; _i++) {
            var eventType = EventTypes_1[_i];
            _this[eventType] = Event_1.default;
        }
        // Copies functionality from global (like eval, String, Array, Object etc.)
        if (global !== undefined) {
            var descriptors = Object.getOwnPropertyDescriptors(global);
            Object.defineProperties(_this, descriptors);
        }
        return _this;
    }
    /**
     * Returns an object containing the values of all CSS properties of an element.
     *
     * @note This method has not been implemented. It is just here for compatibility.
     * @return {object} Empty object.
     */
    Window.prototype.getComputedStyle = function () {
        return {};
    };
    /**
     * Scrolls to a particular set of coordinates in the document.
     *
     * @note This method has not been implemented. It is just here for compatibility.
     */
    Window.prototype.scrollTo = function () { };
    /**
     * Disposes the window.
     */
    Window.prototype.dispose = function () { };
    /**
     * Mock animation frames with timeouts.
     *
     * @param {function} callback Callback.
     * @returns {NodeJS.Timeout} Timeout ID.
     */
    Window.prototype.requestAnimationFrame = function (callback) {
        return setTimeout(callback, 0);
    };
    /**
     * Mock animation frames with timeouts.
     *
     * @param {NodeJS.Timeout} id Timeout ID.
     */
    Window.prototype.cancelAnimationFrame = function (id) {
        clearTimeout(id);
    };
    return Window;
}(EventTarget_1.default));
exports.default = Window;
//# sourceMappingURL=Window.js.map