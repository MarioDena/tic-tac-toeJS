"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ABC = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');
/**
 * CSS Cache.
 */
var ScopedCSSCache = /** @class */ (function () {
    function ScopedCSSCache() {
        this.original = [];
        this.scoped = [];
    }
    /**
     * Returns the scoped CSS.
     *
     * @return {string} Scoped style.
     */
    ScopedCSSCache.prototype.getAllScopedCSS = function () {
        return this.scoped.join('');
    };
    /**
     * Returns scoped CSS.
     *
     * @param {string} css CSS.
     * @return {string} Cached scoped CSS.
     */
    ScopedCSSCache.prototype.getScoped = function (css) {
        var index = this.original.indexOf(css);
        if (index !== -1) {
            return this.scoped[index];
        }
        return null;
    };
    /**
     * Returns scope ID.
     *
     * @param {string} css CSS.
     * @return string Scope ID.
     */
    ScopedCSSCache.prototype.getScopeID = function (css) {
        var index = this.original.indexOf(css);
        if (index !== -1) {
            return this.getIdByIndex(index);
        }
        return this.getIdByIndex(this.original.length);
    };
    /**
     * Returns scoped CSS.
     *
     * @param {string} css CSS.
     * @param {string} scopedCSS Scoped CSS.
     */
    ScopedCSSCache.prototype.setScoped = function (css, scopedCSS) {
        var index = this.original.indexOf(css);
        if (index !== -1) {
            this.original[index] = css;
            this.scoped[index] = scopedCSS;
        }
        else {
            this.original.push(css);
            this.scoped.push(scopedCSS);
        }
    };
    /**
     * Removes a cache entry.
     *
     * @param {string} css CSS.
     */
    ScopedCSSCache.prototype.removeScoped = function (css) {
        var index = this.original.indexOf(css);
        if (index !== -1) {
            this.original.splice(index, 1);
            this.scoped.splice(index, 1);
        }
    };
    /**
     * Clears cache.
     */
    ScopedCSSCache.prototype.clear = function () {
        this.original = [];
        this.scoped = [];
    };
    /**
     * Returns an unique ID.
     *
     * @param {number} index Index.
     * @return {string} ID.
     */
    ScopedCSSCache.prototype.getIdByIndex = function (index) {
        return ABC[index] !== undefined ? ABC[index] : 'a' + index;
    };
    return ScopedCSSCache;
}());
exports.default = ScopedCSSCache;
//# sourceMappingURL=ScopedCSSCache.js.map