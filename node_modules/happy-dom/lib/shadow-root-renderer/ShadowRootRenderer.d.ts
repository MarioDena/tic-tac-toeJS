import ScopedCSSCache from './css/ScopedCSSCache';
import Element from '../nodes/basic-types/element/Element';
import DocumentFragment from '../nodes/basic-types/document-fragment/DocumentFragment';
/**
 * Patch for scoping elements when requesting "document.documentElement.innerHTML" or "document.documentElement.outerHTML".
 * This patch is mainly useful on server side DOMs.
 */
export default class ShadowRootRenderer {
    /**
     * Renders an element scoped without touching the original elements.
     *
     * @param {Element|DocumentFragment} element Element to render.
     * @param {ScopedCSSCache} cssCache Options object.
     * @return {string} Result.
     */
    static getInnerHTML(element: Element | DocumentFragment, cssCache: ScopedCSSCache): string;
    /**
     * Scopes an element.
     *
     * @param {Element} element Element to render.
     * @param {ScopedCSSCache} cssCache Options object.
     */
    static scopeElement(element: Element, cssCache: ScopedCSSCache): void;
    /**
     * Moves child nodes into shadow root slot elements.
     *
     * @param {Element} element Element.
     */
    private static moveChildNodesIntoSlots;
    /**
     * Extracts CSS.
     *
     * @param {Element} element Element.
     * @param {ElementRenderOptions} cssCache Options object.
     */
    private static extractAndScopeCSS;
    /**
     * Extracts CSS.
     *
     * @param {ShadowRoot} shadowRoot Shadow root.
     * @return {string} CSS.
     */
    private static extractCSS;
    /**
     * Scopes an element by adding a unique id as a class to it and its children.
     *
     * @param {Element|ShadowRoot} element Element to scope.
     * @param {string} id Unique ID.
     */
    private static scopeShadowRoot;
}
