/// <reference types="node" />
import CustomElementRegistry from './custom-element/CustomElementRegistry';
import Document from './nodes/basic-types/document/Document';
import Node from './nodes/basic-types/node/Node';
import TextNode from './nodes/basic-types/text-node/TextNode';
import CommentNode from './nodes/basic-types/comment-node/CommentNode';
import ShadowRoot from './nodes/basic-types/shadow-root/ShadowRoot';
import Element from './nodes/basic-types/element/Element';
import HTMLElement from './nodes/basic-types/html-element/HTMLElement';
import HTMLTemplateElement from './nodes/elements/template/HTMLTemplateElement';
import HTMLFormElement from './nodes/elements/form/HTMLFormElement';
import HTMLInputElement from './nodes/elements/input/HTMLInputElement';
import HTMLTextAreaElement from './nodes/elements/text-area/HTMLTextAreaElement';
import DocumentFragment from './nodes/basic-types/document-fragment/DocumentFragment';
import TreeWalker from './tree-walker/TreeWalker';
import Event from './event/Event';
import CustomEvent from './event/CustomEvent';
import EventTarget from './event/EventTarget';
import URL from './location/URL';
import Location from './location/Location';
import MutationObserver from './mutation-observer/MutationObserver';
import ShadowRootRenderOptions from './shadow-root-renderer/ShadowRootRenderOptions';
/**
 * Handles the Window.
 */
export default class Window extends EventTarget {
    Node: typeof Node;
    TextNode: typeof TextNode;
    CommentNode: typeof CommentNode;
    ShadowRoot: typeof ShadowRoot;
    HTMLElement: typeof HTMLElement;
    HTMLInputElement: typeof HTMLInputElement;
    HTMLFormElement: typeof HTMLFormElement;
    HTMLTextAreaElement: typeof HTMLTextAreaElement;
    HTMLTemplateElement: typeof HTMLTemplateElement;
    Element: typeof Element;
    DocumentFragment: typeof DocumentFragment;
    NodeFilter: {
        FILTER_ACCEPT: number;
        FILTER_REJECT: number;
        FILTER_SKIP: number;
        SHOW_ALL: number;
        SHOW_ATTRIBUTE: number;
        SHOW_CDATA_SECTION: number;
        SHOW_COMMENT: number;
        SHOW_DOCUMENT: number;
        SHOW_DOCUMENT_FRAGMENT: number;
        SHOW_DOCUMENT_TYPE: number;
        SHOW_ELEMENT: number;
        SHOW_ENTITY: number;
        SHOW_ENTITY_REFERENCE: number;
        SHOW_NOTATION: number;
        SHOW_PROCESSING_INSTRUCTION: number;
        SHOW_TEXT: number;
    };
    TreeWalker: typeof TreeWalker;
    MutationObserver: typeof MutationObserver;
    Document: typeof Document;
    Event: typeof Event;
    CustomEvent: typeof CustomEvent;
    URL: typeof URL;
    Location: typeof Location;
    CustomElementRegistry: typeof CustomElementRegistry;
    Window: typeof Window;
    document: Document;
    customElements: CustomElementRegistry;
    location: Location;
    navigator: {
        userAgent: string;
    };
    console: Console;
    self: Window;
    window: Window;
    shadowRootRenderOptions: ShadowRootRenderOptions;
    /**
     * Constructor.
     */
    constructor();
    /**
     * Returns an object containing the values of all CSS properties of an element.
     *
     * @note This method has not been implemented. It is just here for compatibility.
     * @return {object} Empty object.
     */
    getComputedStyle(): {};
    /**
     * Scrolls to a particular set of coordinates in the document.
     *
     * @note This method has not been implemented. It is just here for compatibility.
     */
    scrollTo(): void;
    /**
     * Disposes the window.
     */
    dispose(): void;
    /**
     * Mock animation frames with timeouts.
     *
     * @param {function} callback Callback.
     * @returns {NodeJS.Timeout} Timeout ID.
     */
    requestAnimationFrame(callback: (timestamp?: number) => void): NodeJS.Timeout;
    /**
     * Mock animation frames with timeouts.
     *
     * @param {NodeJS.Timeout} id Timeout ID.
     */
    cancelAnimationFrame(id: any): void;
}
