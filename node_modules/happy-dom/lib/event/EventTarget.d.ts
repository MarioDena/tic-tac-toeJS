import Event from './Event';
/**
 * Handles events.
 */
export default abstract class EventTarget {
    private readonly _listeners;
    /**
     * Adds an event listener.
     *
     * @param {string} type Event type.
     * @param {function} listener Listener.
     */
    addEventListener(type: string, listener: (event: Event) => void): void;
    /**
     * Adds an event listener.
     *
     * @param {string} type Event type.
     * @param {function} listener Listener.
     */
    removeEventListener(type: string, listener: (event: Event) => void): void;
    /**
     * Dispatches an event.
     *
     * @param {Event} event Event.
     * @return {boolean} The return value is false if event is cancelable and at least one of the event handlers which handled this event called Event.preventDefault()
     */
    dispatchEvent(event: Event): boolean;
}
