"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var HTMLElement_1 = __importDefault(require("../html-element/HTMLElement"));
var TextNode_1 = __importDefault(require("../text-node/TextNode"));
var CommentNode_1 = __importDefault(require("../comment-node/CommentNode"));
var Node_1 = __importDefault(require("../node/Node"));
var NodeType_1 = __importDefault(require("../node/NodeType"));
var TreeWalker_1 = __importDefault(require("../../../tree-walker/TreeWalker"));
var DocumentFragment_1 = __importDefault(require("../document-fragment/DocumentFragment"));
var HTMLParser_1 = __importDefault(require("../../../html-parser/HTMLParser"));
var Event_1 = __importDefault(require("../../../event/Event"));
var DOMImplementation_1 = __importDefault(require("../../../dom-implementation/DOMImplementation"));
var Elements_1 = __importDefault(require("../../../html-config/Elements"));
/**
 * Document.
 */
var Document = /** @class */ (function (_super) {
    __extends(Document, _super);
    /**
     * Creates an instance of Document.
     *
     * @param window Window instance.
     */
    function Document(window) {
        var _this = _super.call(this) || this;
        _this.nodeType = NodeType_1.default.DOCUMENT_NODE;
        _this._isConnected = true;
        _this.defaultView = window;
        _this.implementation = new DOMImplementation_1.default(window);
        _this.documentElement = _this.createElement('html');
        _this.body = _this.createElement('body');
        _this.head = _this.createElement('head');
        _this.documentElement.appendChild(_this.head);
        _this.documentElement.appendChild(_this.body);
        _this.documentElement.isConnected = true;
        _this.appendChild(_this.documentElement);
        return _this;
    }
    Object.defineProperty(Document.prototype, "nodeName", {
        /**
         * Node name.
         *
         * @return Node name.
         */
        get: function () {
            return '#document';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Replaces the document HTML with new HTML.
     *
     * @param html HTML.
     */
    Document.prototype.write = function (html) {
        var root = HTMLParser_1.default.parse(this, html);
        for (var _i = 0, _a = this.childNodes.slice(); _i < _a.length; _i++) {
            var child = _a[_i];
            this.removeChild(child);
        }
        for (var _b = 0, _c = root.childNodes.slice(); _b < _c.length; _b++) {
            var child = _c[_b];
            this.appendChild(child);
        }
        this.documentElement = this.querySelector('html');
        this.body = this.documentElement.querySelector('body');
        this.head = this.documentElement.querySelector('head');
    };
    /**
     * Opens the document.
     */
    Document.prototype.open = function () { };
    /**
     * Closes the document.
     */
    Document.prototype.close = function () { };
    /**
     * Creates an element.
     *
     * @param  tagName Tag name.
     * @return Element.
     */
    Document.prototype.createElement = function (tagName) {
        var customElementClass = this.defaultView.customElements.get(tagName);
        var elementClass = customElementClass ? customElementClass : this.getElementClass(tagName);
        elementClass.ownerDocument = this;
        var element = new elementClass();
        element.tagName = tagName.toUpperCase();
        element.ownerDocument = this;
        return element;
    };
    /**
     * Creates a text node.
     *
     * @param  data Text data.
     * @returns Text node.
     */
    Document.prototype.createTextNode = function (data) {
        TextNode_1.default.ownerDocument = this;
        var textNode = new TextNode_1.default();
        textNode.textContent = data;
        return textNode;
    };
    /**
     * Creates a comment node.
     *
     * @param  data Text data.
     * @returns Text node.
     */
    Document.prototype.createComment = function (data) {
        CommentNode_1.default.ownerDocument = this;
        var commentNode = new CommentNode_1.default();
        commentNode.textContent = data;
        return commentNode;
    };
    /**
     * Creates a document fragment.
     *
     * @returns Document fragment.
     */
    Document.prototype.createDocumentFragment = function () {
        DocumentFragment_1.default.ownerDocument = this;
        var documentFragment = new DocumentFragment_1.default();
        return documentFragment;
    };
    /**
     * Creates a Tree Walker.
     *
     * @param root Root.
     * @param [whatToShow] What to show.
     * @param [filter] Filter.
     */
    Document.prototype.createTreeWalker = function (root, whatToShow, filter) {
        if (whatToShow === void 0) { whatToShow = -1; }
        if (filter === void 0) { filter = null; }
        return new TreeWalker_1.default(root, whatToShow, filter);
    };
    /**
     * Creates an event.
     *
     * @legacy
     * @param _type Type.
     * @returns Event.
     */
    Document.prototype.createEvent = function (_type) {
        return new Event_1.default('init');
    };
    /**
     * Imports a node.
     *
     * @param node Node to import.
     * @param Imported node.
     */
    Document.prototype.importNode = function (node) {
        if (!(node instanceof Node_1.default)) {
            throw new Error('Parameter 1 was not of type Node.');
        }
        var clone = node.cloneNode(true);
        clone.ownerDocument = this;
        return clone;
    };
    /**
     * Returns the element class for a tag name.
     *
     * @param tagName Tag name.
     * @returns Element class.
     */
    Document.prototype.getElementClass = function (tagName) {
        return Elements_1.default[tagName] || HTMLElement_1.default;
    };
    return Document;
}(DocumentFragment_1.default));
exports.default = Document;
//# sourceMappingURL=Document.js.map