import Element from '../element/Element';
import TextNode from '../text-node/TextNode';
import CommentNode from '../comment-node/CommentNode';
import Window from '../../../window/Window';
import Node from '../node/Node';
import NodeType from '../node/NodeType';
import TreeWalker from '../../../tree-walker/TreeWalker';
import DocumentFragment from '../document-fragment/DocumentFragment';
import Event from '../../../event/Event';
import DOMImplementation from '../../../dom-implementation/DOMImplementation';
/**
 * Document.
 */
export default class Document extends DocumentFragment {
    documentElement: Element;
    body: Element;
    head: Element;
    defaultView: Window;
    nodeType: NodeType;
    protected _isConnected: boolean;
    implementation: DOMImplementation;
    /**
     * Creates an instance of Document.
     *
     * @param window Window instance.
     */
    constructor(window: Window);
    /**
     * Node name.
     *
     * @return Node name.
     */
    get nodeName(): string;
    /**
     * Replaces the document HTML with new HTML.
     *
     * @param html HTML.
     */
    write(html: string): void;
    /**
     * Opens the document.
     */
    open(): void;
    /**
     * Closes the document.
     */
    close(): void;
    /**
     * Creates an element.
     *
     * @param  tagName Tag name.
     * @return Element.
     */
    createElement(tagName: string): Element;
    /**
     * Creates a text node.
     *
     * @param  data Text data.
     * @returns Text node.
     */
    createTextNode(data: string): TextNode;
    /**
     * Creates a comment node.
     *
     * @param  data Text data.
     * @returns Text node.
     */
    createComment(data: string): CommentNode;
    /**
     * Creates a document fragment.
     *
     * @returns Document fragment.
     */
    createDocumentFragment(): DocumentFragment;
    /**
     * Creates a Tree Walker.
     *
     * @param root Root.
     * @param [whatToShow] What to show.
     * @param [filter] Filter.
     */
    createTreeWalker(root: Node, whatToShow?: number, filter?: (node: Node) => number): TreeWalker;
    /**
     * Creates an event.
     *
     * @legacy
     * @param _type Type.
     * @returns Event.
     */
    createEvent(_type: string): Event;
    /**
     * Imports a node.
     *
     * @param node Node to import.
     * @param Imported node.
     */
    importNode(node: Node): Node;
    /**
     * Returns the element class for a tag name.
     *
     * @param tagName Tag name.
     * @returns Element class.
     */
    private getElementClass;
}
