import NodeType from './NodeType';
import Document from '../document/Document';
import EventTarget from '../../../event/EventTarget';
import MutationObserverListener from '../../../mutation-observer/MutationListener';
import Event from '../../../event/Event';
/**
 * Node
 */
export default class Node extends EventTarget {
    static ownerDocument: Document;
    ownerDocument: Document;
    parentNode: Node;
    readonly nodeType: NodeType;
    readonly childNodes: Node[];
    protected _isConnected: boolean;
    protected _observers: MutationObserverListener[];
    /**
     * Constructor.
     */
    constructor();
    /**
     * "true" if connected to DOM.
     *
     * @return "true" if connected.
     */
    get isConnected(): boolean;
    /**
     * Sets the connected state.
     *
     * @param isConnected "true" if connected.
     */
    set isConnected(isConnected: boolean);
    /**
     * Node value.
     *
     * @return Node value.
     */
    get nodeValue(): string;
    /**
     * Node name.
     *
     * @return Node name.
     */
    get nodeName(): string;
    /**
     * Previous sibling.
     *
     * @return Node.
     */
    get previousSibling(): Node;
    /**
     * Next sibling.
     *
     * @return Node.
     */
    get nextSibling(): Node;
    /**
     * Previous element sibling.
     *
     * @return {Node} Node.
     */
    get previousElementSibling(): Node;
    /**
     * Next element sibling.
     *
     * @return {Node} Node.
     */
    get nextElementSibling(): Node;
    /**
     * First child.
     *
     * @return Node.
     */
    get firstChild(): Node;
    /**
     * Last child.
     *
     * @return Node.
     */
    get lastChild(): Node;
    /**
     * First element child.
     *
     * @return {Node} Node.
     */
    get firstElementChild(): Node;
    /**
     * Last element child.
     *
     * @return {Node} Node.
     */
    get lastElementChild(): Node;
    /**
     * Connected callback.
     */
    connectedCallback?(): void;
    /**
     * Disconnected callback.
     */
    disconnectedCallback?(): void;
    /**
     * Clones a node.
     *
     * @param [deep=false] "true" to clone deep.
     * @return Cloned node.
     */
    cloneNode(deep?: boolean): Node;
    /**
     * Append a child node to childNodes.
     *
     * @param  node Node to append.
     * @return Appended node.
     */
    appendChild(node: Node): Node;
    /**
     * Removes the node from its parent.
     */
    remove(): void;
    /**
     * Remove Child element from childNodes array.
     *
     * @param node Node to remove
     */
    removeChild(node: Node): void;
    /**
     * Inserts a node before another.
     *
     * @param newNode Node to insert.
     * @param referenceNode Node to insert before.
     * @return Inserted node.
     */
    insertBefore(newNode: Node, referenceNode: Node): Node;
    /**
     * Replaces a node with another.
     *
     * @param newChild New child.
     * @param oldChild Old child.
     * @return Replaced node.
     */
    replaceChild(newChild: Node, oldChild: Node): Node;
    /**
     * @override
     */
    dispatchEvent(event: Event): boolean;
    /**
     * Observeres the node.
     * Used by MutationObserver, but it is not part of the HTML standard.
     *
     * @param listener Listener.
     */
    _observe(listener: MutationObserverListener): void;
    /**
     * Stops observing the node.
     * Used by MutationObserver, but it is not part of the HTML standard.
     *
     * @param listener Listener.
     */
    _unobserve(listener: MutationObserverListener): void;
}
