import Node from '../node/Node';
import NodeType from '../node/NodeType';
import ShadowRoot from '../shadow-root/ShadowRoot';
import Attribute from './Attribute';
import DOMRect from './DOMRect';
import Range from './Range';
import ClassList from './ClassList';
/**
 * Element.
 */
export default class Element extends Node {
    tagName: string;
    nodeType: NodeType;
    shadowRoot: ShadowRoot;
    classList: ClassList;
    scrollTop: number;
    scrollLeft: number;
    _attributesMap: {
        [k: string]: string;
    };
    private _attributePropertyMap;
    _useCaseSensitiveAttributes: boolean;
    /**
     * Returns ID.
     *
     * @return ID.
     */
    get id(): string;
    /**
     * Sets ID.
     *
     * @param id ID.
     * @return HTML.
     */
    set id(id: string);
    /**
     * Returns class name.
     *
     * @return Class name.
     */
    get className(): string;
    /**
     * Sets class name.
     *
     * @param className Class name.
     * @return Class name.
     */
    set className(className: string);
    /**
     * Returns children.
     *
     * @returns Children.
     */
    get children(): Element[];
    /**
     * Node name.
     *
     * @return Node name.
     */
    get nodeName(): string;
    /**
     * Get text value of children.
     *
     * @return Text content.
     */
    get textContent(): string;
    /**
     * Sets text content.
     *
     * @param textContent Text content.
     */
    set textContent(textContent: string);
    /**
     * Returns inner HTML.
     *
     * @return HTML.
     */
    get innerHTML(): string;
    /**
     * Sets inner HTML.
     *
     * @param html HTML.
     */
    set innerHTML(html: string);
    /**
     * Returns outer HTML.
     *
     * @return HTML.
     */
    get outerHTML(): string;
    /**
     * Returns attributes.
     *
     * @returns Attributes.
     */
    get attributes(): {
        [k: string]: Attribute | number;
    };
    /**
     * Attribute changed callback.
     *
     * @param name Name.
     * @param oldValue Old value.
     * @param newValue New value.
     */
    attributeChangedCallback?(name: string, oldValue: string, newValue: string): void;
    /**
     * Sets an attribute.
     *
     * @param name Name.
     * @param value Value.
     */
    setAttribute(name: string, value: string): void;
    /**
     * Returns attribute value.
     *
     * @param name Name.
     */
    getAttribute(name: string): string;
    /**
     * Returns a boolean value indicating whether the specified element has the attribute or not.
     *
     * @param name Attribute name.
     * @returns True if attribute exists, false otherwise.
     */
    hasAttribute(name: string): boolean;
    /**
     * Returns "true" if the element has attributes.
     *
     * @return "true" if the element has attributes.
     */
    hasAttributes(): boolean;
    /**
     * Removes an attribute.
     *
     * @param name Name.
     */
    removeAttribute(name: string): void;
    /**
     * Sets raw attributes.
     *
     * @param rawAttributes Raw attributes.
     */
    _setRawAttributes(rawAttributes: string): void;
    /**
     * Returns raw attributes.
     *
     * @returns {string} Raw attributes.
     */
    _getRawAttributes(): string;
    /**
     * Attaches a shadow root.
     *
     * @param _shadowRootInit Shadow root init.
     * @returns Shadow root.
     */
    attachShadow(_shadowRootInit: {
        mode: string;
    }): ShadowRoot;
    /**
     * Scrolls to a particular set of coordinates in the document.
     *
     * @note This method has not been implemented. It is just here for compatibility.
     */
    scrollTo(): void;
    /**
     * Converts to string.
     *
     * @return String.
     */
    toString(): string;
    /**
     * Returns the size of an element and its position relative to the viewport.
     *
     * @returns DOM rect.
     */
    getBoundingClientRect(): DOMRect;
    /**
     * Returns a range.
     *
     * @returns Range.
     */
    createTextRange(): Range;
    /**
     * Query CSS selector to find matching nodes.
     *
     * @param selector CSS selector.
     * @returns Matching elements.
     */
    querySelectorAll(selector: string): Element[];
    /**
     * Query CSS Selector to find matching node.
     *
     * @param selector CSS selector.
     * @return Matching node.
     */
    querySelector(selector: string): Element;
    /**
     * Returns an elements by tag name.
     *
     * @param tagName Tag name.
     * @returns Matching nodes.
     */
    getElementsByTagName(tagName: string): Element[];
    /**
     * Returns an elements by class name.
     *
     * @param className Tag name.
     * @returns Matching nodes.
     */
    getElementsByClassName(className: string): Element[];
    /**
     * Sets a property when setting an attribute.
     *
     * @param name Name.
     * @param value Value.
     */
    protected _setAttributeProperty(name: any, value: any): void;
    /**
     * Sets boolean properties to false if a matching attribute is removed.
     *
     * @param name Name.
     */
    protected _removeAttributeProperty(name: any): void;
    /**
     * Returns the property name based on an attribute name.
     * This will be used for setting attribute values as properties on the element.
     *
     * @param name Attribute name.
     * @returns Property name.
     */
    protected _getPropertyNameFromAttribute(name: string): string;
}
