import Node from '../../basic-types/node/Node';
import HTMLElement from '../../basic-types/html-element/HTMLElement';
import DocumentFragment from '../../basic-types/document-fragment/DocumentFragment';
/**
 * HTMLTemplateElement.
 */
export default class HTMLTemplateElement extends HTMLElement {
    private contentElement;
    /**
     * Returns the content.
     *
     * @return {DocumentFragment} Content.
     */
    readonly content: DocumentFragment;
    /**
     * Previous sibling.
     *
     * @return {Node} Node.
     */
    readonly previousSibling: Node;
    /**
     * Next sibling.
     *
     * @return {Node} Node.
     */
    readonly nextSibling: Node;
    /**
     * First child.
     *
     * @return {Node} Node.
     */
    readonly firstChild: Node;
    /**
     * Last child.
     *
     * @return {Node} Node.
     */
    readonly lastChild: Node;
    /**
     * Append a child node to childNodes.
     *
     * @param  {Node} node Node to append.
     * @return {Node} Appended node.
     */
    appendChild(node: Node): Node;
    /**
     * Remove Child element from childNodes array.
     *
     * @param {Node} node Node to remove
     */
    removeChild(node: Node): void;
    /**
     * Inserts a node before another.
     *
     * @param {Node} newNode Node to insert.
     * @param {Node} referenceNode Node to insert before.
     * @return {Node} Inserted node.
     */
    insertBefore(newNode: Node, referenceNode: Node): Node;
    /**
     * Replaces a node with another.
     *
     * @param {Node} newChild New child.
     * @param {Node} oldChild Old child.
     * @return {Node} Replaced node.
     */
    replaceChild(newChild: Node, oldChild: Node): Node;
}
