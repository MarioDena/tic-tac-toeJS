"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var HTMLElement_1 = __importDefault(require("../../basic-types/html-element/HTMLElement"));
var ValidityState_1 = __importDefault(require("./ValidityState"));
var HTMLInputPropertyAttributes = __importStar(require("./HTMLInputPropertyAttributes.json"));
/**
 * HTMLElement.
 */
var HTMLInputElement = /** @class */ (function (_super) {
    __extends(HTMLInputElement, _super);
    function HTMLInputElement() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // Related to parent form.
        _this.form = null;
        _this.formAction = '';
        _this.formMethod = '';
        _this.formNoValidate = false;
        // Any type of input
        _this.name = '';
        _this.type = 'text';
        _this.disabled = false;
        _this.autofocus = false;
        _this.required = false;
        _this._value = '';
        // Type specific: checkbox/radio
        _this._checked = false;
        _this.defaultChecked = null;
        _this.indeterminate = false;
        // Type specific: image
        _this.alt = '';
        _this.height = 0;
        _this.src = null;
        _this.width = 0;
        // Type specific: file
        _this.accept = null;
        _this.allowdirs = null;
        // Type specific: text/number
        _this.autocomplete = '';
        _this.min = '';
        _this.max = '';
        _this.minLength = -1;
        _this.maxLength = -1;
        _this.pattern = '';
        _this.placeholder = '';
        _this.readOnly = false;
        _this.size = 0;
        // Type specific: text/password/search/tel/url/week/month
        _this.selectionStart = 0;
        _this.selectionEnd = 0;
        _this.selectionDirection = 'forward';
        // Not categorized
        _this.defaultValue = '';
        _this.multiple = false;
        _this.files = [];
        _this.step = '';
        _this.inputmode = '';
        return _this;
    }
    Object.defineProperty(HTMLInputElement.prototype, "value", {
        /**
         * Returns value.
         *
         * @return {string} Value.
         */
        get: function () {
            return this._value;
        },
        /**
         * Sets value.
         *
         * @param {string} value Value.
         */
        set: function (value) {
            this._value = value;
            if (this.defaultValue === null) {
                this.defaultValue = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HTMLInputElement.prototype, "checked", {
        /**
         * Returns checked.
         *
         * @return {boolean} Checked.
         */
        get: function () {
            return this._checked;
        },
        /**
         * Sets checked.
         *
         * @param {boolean} checked Checked.
         */
        set: function (checked) {
            this._checked = checked;
            if (this.defaultChecked === null) {
                this.defaultChecked = checked;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HTMLInputElement.prototype, "validity", {
        /**
         * Returns validity state.
         *
         * @return {ValidityState} Validity state.
         */
        get: function () {
            return new ValidityState_1.default(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HTMLInputElement.prototype, "validationMessage", {
        /**
         * Returns validity message.
         *
         * @return {string} Validation message.
         */
        get: function () {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HTMLInputElement.prototype, "willValidate", {
        /**
         * Returns "true" if it will validate.
         *
         * @return {boolean} "true" if it will validate.
         */
        get: function () {
            return (this.type !== 'hidden' && this.type !== 'reset' && this.type !== 'button' && !this.disabled && !this['readOnly']);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HTMLInputElement.prototype, "valueAsDate", {
        /**
         * Returns value as Date.
         *
         * @return {Date} Date.
         */
        get: function () {
            return this.value ? new Date(this.value) : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HTMLInputElement.prototype, "valueAsNumber", {
        /**
         * Returns value as number.
         *
         * @return {number} Number.
         */
        get: function () {
            return this.value ? parseFloat(this.value) : NaN;
        },
        enumerable: true,
        configurable: true
    });
    HTMLInputElement._observedPropertyAttributes = Object.assign({}, HTMLElement_1.default._observedPropertyAttributes, HTMLInputPropertyAttributes);
    return HTMLInputElement;
}(HTMLElement_1.default));
exports.default = HTMLInputElement;
//# sourceMappingURL=HTMLInputElement.js.map