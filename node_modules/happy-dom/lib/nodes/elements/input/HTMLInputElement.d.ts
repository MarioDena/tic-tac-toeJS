import HTMLElement from '../../basic-types/html-element/HTMLElement';
import HTMLFormElement from '../form/HTMLFormElement';
import ValidityState from './ValidityState';
/**
 * HTMLElement.
 */
export default class HTMLInputElement extends HTMLElement {
    protected static _observedPropertyAttributes: {
        [k: string]: string;
    } & {
        "form": string;
        "formaction": string;
        "formmethod": string;
        "formnovalidate": string;
        "name": string;
        "type": string;
        "disabled": string;
        "autofocus": string;
        "required": string;
        "value": string;
        "checked": string;
        "alt": string;
        "height": string;
        "src": string;
        "width": string;
        "accept": string;
        "allowdirs": string;
        "autocomplete": string;
        "min": string;
        "max": string;
        "minlength": string;
        "maxlength": string;
        "pattern": string;
        "placeholder": string;
        "readonly": string;
        "multiple": string;
        "step": string;
        "inputmode": string;
    };
    form: HTMLFormElement;
    formAction: string;
    formMethod: string;
    formNoValidate: boolean;
    name: string;
    type: string;
    disabled: boolean;
    autofocus: boolean;
    required: boolean;
    _value: string;
    _checked: boolean;
    defaultChecked: boolean;
    indeterminate: boolean;
    alt: string;
    height: number;
    src: string;
    width: number;
    accept: string;
    allowdirs: string;
    autocomplete: string;
    min: string;
    max: string;
    minLength: number;
    maxLength: number;
    pattern: string;
    placeholder: string;
    readOnly: boolean;
    size: number;
    selectionStart: number;
    selectionEnd: number;
    selectionDirection: string;
    defaultValue: string;
    multiple: boolean;
    files: [];
    step: string;
    inputmode: string;
    /**
     * Returns value.
     *
     * @return {string} Value.
     */
    /**
    * Sets value.
    *
    * @param {string} value Value.
    */
    value: string;
    /**
     * Returns checked.
     *
     * @return {boolean} Checked.
     */
    /**
    * Sets checked.
    *
    * @param {boolean} checked Checked.
    */
    checked: boolean;
    /**
     * Returns validity state.
     *
     * @return {ValidityState} Validity state.
     */
    readonly validity: ValidityState;
    /**
     * Returns validity message.
     *
     * @return {string} Validation message.
     */
    readonly validationMessage: string;
    /**
     * Returns "true" if it will validate.
     *
     * @return {boolean} "true" if it will validate.
     */
    readonly willValidate: boolean;
    /**
     * Returns value as Date.
     *
     * @return {Date} Date.
     */
    readonly valueAsDate: Date;
    /**
     * Returns value as number.
     *
     * @return {number} Number.
     */
    readonly valueAsNumber: number;
}
