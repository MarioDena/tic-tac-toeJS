"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var HTMLElement_1 = __importDefault(require("../../basic-types/html-element/HTMLElement"));
var HTMLTextAreaPropertyAttributes = __importStar(require("./HTMLTextAreaPropertyAttributes.json"));
/**
 * HTMLTextAreaElement.
 */
var HTMLTextAreaElement = /** @class */ (function (_super) {
    __extends(HTMLTextAreaElement, _super);
    function HTMLTextAreaElement() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.form = null;
        _this.name = '';
        _this.type = 'textarea';
        _this.disabled = false;
        _this.autofocus = false;
        _this.required = false;
        _this._value = '';
        _this.autocomplete = '';
        _this.minLength = -1;
        _this.maxLength = -1;
        _this.placeholder = '';
        _this.readOnly = false;
        _this.selectionStart = 0;
        _this.selectionEnd = 0;
        _this.selectionDirection = 'forward';
        _this.defaultValue = '';
        _this.inputmode = '';
        return _this;
    }
    Object.defineProperty(HTMLTextAreaElement.prototype, "value", {
        /**
         * Returns value.
         *
         * @return {string} Value.
         */
        get: function () {
            return this._value;
        },
        /**
         * Sets value.
         *
         * @param {string} value Value.
         */
        set: function (value) {
            this._value = value;
            if (this.defaultValue === null) {
                this.defaultValue = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HTMLTextAreaElement.prototype, "textLength", {
        /**
         * Returns text length.
         *
         * @param {number} Text length.
         */
        get: function () {
            return this.value.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Append a child node to childNodes.
     *
     * @override
     * @param  {Node} node Node to append.
     * @return {Node} Appended node.
     */
    HTMLTextAreaElement.prototype.appendChild = function (node) {
        _super.prototype.appendChild.call(this, node);
        this.value = this.textContent;
        return node;
    };
    /**
     * Remove Child element from childNodes array.
     *
     * @param {Node} node Node to remove
     */
    HTMLTextAreaElement.prototype.removeChild = function (node) {
        _super.prototype.removeChild.call(this, node);
        this.value = this.textContent;
    };
    /**
     * Inserts a node before another.
     *
     * @param {Node} newNode Node to insert.
     * @param {Node} referenceNode Node to insert before.
     * @return {Node} Inserted node.
     */
    HTMLTextAreaElement.prototype.insertBefore = function (newNode, referenceNode) {
        _super.prototype.insertBefore.call(this, newNode, referenceNode);
        this.value = this.textContent;
        return newNode;
    };
    HTMLTextAreaElement._observedPropertyAttributes = Object.assign({}, HTMLElement_1.default._observedPropertyAttributes, HTMLTextAreaPropertyAttributes);
    return HTMLTextAreaElement;
}(HTMLElement_1.default));
exports.default = HTMLTextAreaElement;
//# sourceMappingURL=HTMLTextAreaElement.js.map