import HTMLElement from '../../basic-types/html-element/HTMLElement';
import Node from '../../basic-types/node/Node';
import HTMLFormElement from '../form/HTMLFormElement';
/**
 * HTMLTextAreaElement.
 */
export default class HTMLTextAreaElement extends HTMLElement {
    protected static _observedPropertyAttributes: {
        [k: string]: string;
    } & {
        "form": string;
        "name": string;
        "disabled": string;
        "autofocus": string;
        "required": string;
        "value": string;
        "autocomplete": string;
        "minlength": string;
        "maxlength": string;
        "pattern": string;
        "placeholder": string;
        "readonly": string;
        "size": string;
        "inputmode": string;
    };
    form: HTMLFormElement;
    name: string;
    readonly type: string;
    disabled: boolean;
    autofocus: boolean;
    required: boolean;
    _value: string;
    autocomplete: string;
    minLength: number;
    maxLength: number;
    placeholder: string;
    readOnly: boolean;
    selectionStart: number;
    selectionEnd: number;
    selectionDirection: string;
    defaultValue: string;
    inputmode: string;
    /**
     * Returns value.
     *
     * @return {string} Value.
     */
    /**
    * Sets value.
    *
    * @param {string} value Value.
    */
    value: string;
    /**
     * Returns text length.
     *
     * @param {number} Text length.
     */
    readonly textLength: number;
    /**
     * Append a child node to childNodes.
     *
     * @override
     * @param  {Node} node Node to append.
     * @return {Node} Appended node.
     */
    appendChild(node: Node): Node;
    /**
     * Remove Child element from childNodes array.
     *
     * @param {Node} node Node to remove
     */
    removeChild(node: Node): void;
    /**
     * Inserts a node before another.
     *
     * @param {Node} newNode Node to insert.
     * @param {Node} referenceNode Node to insert before.
     * @return {Node} Inserted node.
     */
    insertBefore(newNode: Node, referenceNode: Node): Node;
}
