"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var HTMLElement_1 = __importDefault(require("../../basic-types/html-element/HTMLElement"));
var HTMLFormPropertyAttributes = __importStar(require("./HTMLFormPropertyAttributes.json"));
/**
 * HTMLFormElement.
 */
var HTMLFormElement = /** @class */ (function (_super) {
    __extends(HTMLFormElement, _super);
    function HTMLFormElement() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = null;
        _this.method = null;
        _this.target = null;
        _this.action = null;
        _this.encoding = null;
        _this.enctype = null;
        _this.acceptCharset = null;
        _this.autocomplete = 'off';
        _this.noValidate = null;
        return _this;
    }
    Object.defineProperty(HTMLFormElement.prototype, "elements", {
        /**
         * Returns input elements.
         *
         * @return {Element[]} Elements.
         */
        get: function () {
            return this.querySelectorAll('input,textarea');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HTMLFormElement.prototype, "length", {
        /**
         * Returns number of input elements.
         *
         * @return {number} Length.
         */
        get: function () {
            return this.elements.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Submits form.
     */
    HTMLFormElement.prototype.submit = function () { };
    /**
     * Resets form.
     */
    HTMLFormElement.prototype.reset = function () { };
    /**
     * Reports validity.
     */
    HTMLFormElement.prototype.reportValidity = function () { };
    HTMLFormElement._observedPropertyAttributes = Object.assign({}, HTMLElement_1.default._observedPropertyAttributes, HTMLFormPropertyAttributes);
    return HTMLFormElement;
}(HTMLElement_1.default));
exports.default = HTMLFormElement;
//# sourceMappingURL=HTMLFormElement.js.map