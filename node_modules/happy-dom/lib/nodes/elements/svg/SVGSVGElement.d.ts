import SVGGraphicsElement from './SVGGraphicsElement';
import Node from '../../basic-types/node/Node';
import SVGRect from './SVGRect';
import SVGPoint from './SVGPoint';
import SVGLength from './SVGLength';
import SVGAngle from './SVGAngle';
import SVGNumber from './SVGNumber';
import SVGTransform from './SVGTransform';
import SVGAnimatedRect from './SVGAnimatedRect';
/**
 * SVGSVGElement.
 */
export default class SVGSVGElement extends SVGGraphicsElement {
    protected static _observedPropertyAttributes: {
        [k: string]: string;
    } & {
        "preserveaspectratio": string;
        "width": string;
        "height": string;
        "x": string;
        "y": string;
        "contentscripttype": string;
    };
    preserveAspectRatio: string;
    width: string;
    height: string;
    x: string;
    y: string;
    contentScriptType: string;
    currentScale: number;
    /**
     * Returns viewport.
     *
     * @return {SVGRect} SVG rect.
     */
    readonly viewport: SVGRect;
    /**
     * Returns current translate.
     *
     * @return {SVGPoint} SVG point.
     */
    readonly currentTranslate: SVGPoint;
    /**
     * Returns view box.
     *
     * @return {SVGAnimatedRect} Viewbox.
     */
    readonly viewBox: SVGAnimatedRect;
    /**
     * Pauses animation.
     */
    pauseAnimations(): void;
    /**
     * Unpauses animation.
     */
    unpauseAnimations(): void;
    /**
     * Returns "true" if animation is paused.
     *
     * @returns {boolean} "true" if animation is paused.
     */
    animationsPaused(): boolean;
    /**
     * Returns the current time in seconds relative to the start time for the current SVG document fragment.
     *
     * @returns {number} Current time.
     */
    getCurrentTime(): number;
    /**
     * Sets current time.
     */
    setCurrentTime(): void;
    /**
     * Returns intersection list.
     *
     * @returns {Node[]} Intersection list.
     */
    getIntersectionList(): Node[];
    /**
     * Returns enclousure list.
     *
     * @returns {Node[]} Enclousure list.
     */
    getEnclosureList(): Node[];
    /**
     * Returns true if the rendered content of the given element intersects the supplied rectangle.
     *
     * @returns {boolean} Intersection state.
     */
    checkIntersection(): boolean;
    /**
     * Returns true if the rendered content of the given element is entirely contained within the supplied rectangle.
     *
     * @returns {boolean} Enclousure state.
     */
    checkEnclosure(): boolean;
    /**
     * Unselects any selected objects, including any selections of text strings and type-in bars.
     */
    deselectAll(): void;
    /**
     * Returns a number.
     *
     * @return {SVGNumber} Number.
     */
    readonly createSVGNumber: SVGNumber;
    /**
     * Returns a length.
     *
     * @return {SVGLength} Length.
     */
    readonly createSVGLength: SVGLength;
    /**
     * Returns a angle.
     *
     * @return {SVGAngle} Angle.
     */
    readonly createSVGAngle: SVGAngle;
    /**
     * Returns a point.
     *
     * @return {SVGPoint} Point.
     */
    readonly createSVGPoint: SVGPoint;
    /**
     * Returns a rect.
     *
     * @return {SVGRect} Rect.
     */
    readonly createSVGRect: SVGRect;
    /**
     * Returns a transform.
     *
     * @return {SVGTransform} Transform.
     */
    readonly createSVGTransform: SVGTransform;
}
