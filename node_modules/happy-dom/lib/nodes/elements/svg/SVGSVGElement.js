"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var SVGGraphicsElement_1 = __importDefault(require("./SVGGraphicsElement"));
var SVGRect_1 = __importDefault(require("./SVGRect"));
var SVGPoint_1 = __importDefault(require("./SVGPoint"));
var SVGLength_1 = __importDefault(require("./SVGLength"));
var SVGAngle_1 = __importDefault(require("./SVGAngle"));
var SVGNumber_1 = __importDefault(require("./SVGNumber"));
var SVGTransform_1 = __importDefault(require("./SVGTransform"));
var SVGAnimatedRect_1 = __importDefault(require("./SVGAnimatedRect"));
var SVGSVGElementPropertyAttributes = __importStar(require("./SVGSVGElementPropertyAttributes.json"));
/**
 * SVGSVGElement.
 */
var SVGSVGElement = /** @class */ (function (_super) {
    __extends(SVGSVGElement, _super);
    function SVGSVGElement() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.preserveAspectRatio = 'xMidYMid meet';
        _this.width = '';
        _this.height = '';
        _this.x = '';
        _this.y = '';
        _this.contentScriptType = '';
        _this.currentScale = 1;
        return _this;
    }
    Object.defineProperty(SVGSVGElement.prototype, "viewport", {
        /**
         * Returns viewport.
         *
         * @return {SVGRect} SVG rect.
         */
        get: function () {
            return new SVGRect_1.default();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SVGSVGElement.prototype, "currentTranslate", {
        /**
         * Returns current translate.
         *
         * @return {SVGPoint} SVG point.
         */
        get: function () {
            return new SVGPoint_1.default();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SVGSVGElement.prototype, "viewBox", {
        /**
         * Returns view box.
         *
         * @return {SVGAnimatedRect} Viewbox.
         */
        get: function () {
            var rect = new SVGAnimatedRect_1.default();
            var viewBox = this.getAttribute('viewBox');
            var list = viewBox.split(/\s+/);
            rect.baseVal.x = Number(list[0]);
            rect.baseVal.y = Number(list[1]);
            rect.baseVal.width = Number(list[2]);
            rect.baseVal.height = Number(list[3]);
            return rect;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Pauses animation.
     */
    SVGSVGElement.prototype.pauseAnimations = function () { };
    /**
     * Unpauses animation.
     */
    SVGSVGElement.prototype.unpauseAnimations = function () { };
    /**
     * Returns "true" if animation is paused.
     *
     * @returns {boolean} "true" if animation is paused.
     */
    SVGSVGElement.prototype.animationsPaused = function () {
        return false;
    };
    /**
     * Returns the current time in seconds relative to the start time for the current SVG document fragment.
     *
     * @returns {number} Current time.
     */
    SVGSVGElement.prototype.getCurrentTime = function () {
        return 0;
    };
    /**
     * Sets current time.
     */
    SVGSVGElement.prototype.setCurrentTime = function () { };
    /**
     * Returns intersection list.
     *
     * @returns {Node[]} Intersection list.
     */
    SVGSVGElement.prototype.getIntersectionList = function () {
        return [];
    };
    /**
     * Returns enclousure list.
     *
     * @returns {Node[]} Enclousure list.
     */
    SVGSVGElement.prototype.getEnclosureList = function () {
        return [];
    };
    /**
     * Returns true if the rendered content of the given element intersects the supplied rectangle.
     *
     * @returns {boolean} Intersection state.
     */
    SVGSVGElement.prototype.checkIntersection = function () {
        return false;
    };
    /**
     * Returns true if the rendered content of the given element is entirely contained within the supplied rectangle.
     *
     * @returns {boolean} Enclousure state.
     */
    SVGSVGElement.prototype.checkEnclosure = function () {
        return false;
    };
    /**
     * Unselects any selected objects, including any selections of text strings and type-in bars.
     */
    SVGSVGElement.prototype.deselectAll = function () { };
    Object.defineProperty(SVGSVGElement.prototype, "createSVGNumber", {
        /**
         * Returns a number.
         *
         * @return {SVGNumber} Number.
         */
        get: function () {
            return new SVGNumber_1.default();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SVGSVGElement.prototype, "createSVGLength", {
        /**
         * Returns a length.
         *
         * @return {SVGLength} Length.
         */
        get: function () {
            return new SVGLength_1.default();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SVGSVGElement.prototype, "createSVGAngle", {
        /**
         * Returns a angle.
         *
         * @return {SVGAngle} Angle.
         */
        get: function () {
            return new SVGAngle_1.default();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SVGSVGElement.prototype, "createSVGPoint", {
        /**
         * Returns a point.
         *
         * @return {SVGPoint} Point.
         */
        get: function () {
            return new SVGPoint_1.default();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SVGSVGElement.prototype, "createSVGRect", {
        /**
         * Returns a rect.
         *
         * @return {SVGRect} Rect.
         */
        get: function () {
            return new SVGRect_1.default();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SVGSVGElement.prototype, "createSVGTransform", {
        /**
         * Returns a transform.
         *
         * @return {SVGTransform} Transform.
         */
        get: function () {
            return new SVGTransform_1.default();
        },
        enumerable: true,
        configurable: true
    });
    SVGSVGElement._observedPropertyAttributes = Object.assign({}, SVGGraphicsElement_1.default._observedPropertyAttributes, SVGSVGElementPropertyAttributes);
    return SVGSVGElement;
}(SVGGraphicsElement_1.default));
exports.default = SVGSVGElement;
//# sourceMappingURL=SVGSVGElement.js.map