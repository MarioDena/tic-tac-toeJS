"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Node_1 = __importDefault(require("../node/Node"));
var NodeType_1 = __importDefault(require("../node/NodeType"));
var MutationRecord_1 = __importDefault(require("../../../mutation-observer/MutationRecord"));
var MutationType_1 = __importDefault(require("../../../mutation-observer/MutationType"));
/**
 * CommentNode.
 */
var CommentNode = /** @class */ (function (_super) {
    __extends(CommentNode, _super);
    function CommentNode() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.nodeType = NodeType_1.default.COMMENT_NODE;
        return _this;
    }
    /**
     * Converts to string.
     *
     * @return {string} String.
     */
    CommentNode.prototype.toString = function () {
        return '<!--' + this._textContent + '-->';
    };
    Object.defineProperty(CommentNode.prototype, "nodeName", {
        /**
         * Node name.
         *
         * @return {string} Node name.
         */
        get: function () {
            return '#comment';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CommentNode.prototype, "textContent", {
        /**
         * Returns text content.
         *
         * @return {string} Text content.
         */
        get: function () {
            return this._textContent;
        },
        /**
         * Sets text content.
         *
         * @param {string} textContent Text content.
         */
        set: function (textContent) {
            var oldValue = this._textContent;
            this._textContent = textContent;
            // MutationObserver
            if (this._observers.length > 0) {
                for (var _i = 0, _a = this._observers; _i < _a.length; _i++) {
                    var observer = _a[_i];
                    if (observer.options.characterData) {
                        var record = new MutationRecord_1.default();
                        record.type = MutationType_1.default.characterData;
                        record.oldValue = observer.options.characterDataOldValue ? oldValue : null;
                        observer.callback([record]);
                    }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CommentNode.prototype, "nodeValue", {
        /**
         * Returns node value.
         *
         * @return {string} Node value.
         */
        get: function () {
            return this._textContent;
        },
        /**
         * Sets node value.
         *
         * @param {string} nodeValue Node value.
         */
        set: function (nodeValue) {
            this.textContent = nodeValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CommentNode.prototype, "data", {
        /**
         * Returns data.
         *
         * @return {string} Data.
         */
        get: function () {
            return this._textContent;
        },
        /**
         * Sets data.
         *
         * @param {string} data Data.
         */
        set: function (nodeValue) {
            this.textContent = nodeValue;
        },
        enumerable: true,
        configurable: true
    });
    return CommentNode;
}(Node_1.default));
exports.default = CommentNode;
//# sourceMappingURL=CommentNode.js.map