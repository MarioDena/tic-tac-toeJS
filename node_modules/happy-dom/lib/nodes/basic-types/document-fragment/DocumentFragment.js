"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Node_1 = __importDefault(require("../node/Node"));
var Element_1 = __importDefault(require("../element/Element"));
var QuerySelector_1 = __importDefault(require("../../../query-selector/QuerySelector"));
var NodeType_1 = __importDefault(require("../node/NodeType"));
/**
 * DocumentFragment.
 */
var DocumentFragment = /** @class */ (function (_super) {
    __extends(DocumentFragment, _super);
    function DocumentFragment() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.nodeType = NodeType_1.default.DOCUMENT_FRAGMENT_NODE;
        _this.mode = 'open';
        return _this;
    }
    Object.defineProperty(DocumentFragment.prototype, "children", {
        /**
         * Returns children.
         *
         * @return {Element[]} Children.
         */
        get: function () {
            return this.childNodes.filter(function (childNode) { return childNode instanceof Element_1.default; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Query CSS selector to find matching nodes.
     *
     * @param  {string} selector CSS selector.
     * @return {Element[]} Matching elements.
     */
    DocumentFragment.prototype.querySelectorAll = function (selector) {
        return QuerySelector_1.default.querySelectorAll(this, selector);
    };
    /**
     * Query CSS Selector to find matching node.
     *
     * @param  {string} selector CSS selector.
     * @return {Element} Matching node.
     */
    DocumentFragment.prototype.querySelector = function (selector) {
        return QuerySelector_1.default.querySelector(this, selector);
    };
    /**
     * Returns an element by ID.
     *
     * @param {string} id ID.
     * @return {Element} Matching node.
     */
    DocumentFragment.prototype.getElementById = function (id) {
        return this.querySelector('[id="' + id + '"]');
    };
    /**
     * Returns an elements by tag name.
     *
     * @param {string} tagName Tag name.
     * @return {Element[]} Matching nodes.
     */
    DocumentFragment.prototype.getElementsByTagName = function (tagName) {
        return this.querySelectorAll(tagName);
    };
    /**
     * Returns an elements by class name.
     *
     * @param {string} className Tag name.
     * @return {Element[]} Matching nodes.
     */
    DocumentFragment.prototype.getElementsByClassName = function (className) {
        return this.querySelectorAll('.' + className.split(' ').join('.'));
    };
    return DocumentFragment;
}(Node_1.default));
exports.default = DocumentFragment;
//# sourceMappingURL=DocumentFragment.js.map