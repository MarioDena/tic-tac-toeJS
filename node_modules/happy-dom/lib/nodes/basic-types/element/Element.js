"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Node_1 = __importDefault(require("../node/Node"));
var TextNode_1 = __importDefault(require("../text-node/TextNode"));
var NodeType_1 = __importDefault(require("../node/NodeType"));
var ShadowRoot_1 = __importDefault(require("../shadow-root/ShadowRoot"));
var Attribute_1 = __importDefault(require("./Attribute"));
var DOMRect_1 = __importDefault(require("./DOMRect"));
var Range_1 = __importDefault(require("./Range"));
var HTMLParser_1 = __importDefault(require("../../../html-parser/HTMLParser"));
var he_1 = require("he");
var ClassList_1 = __importDefault(require("./ClassList"));
var QuerySelector_1 = __importDefault(require("../../../query-selector/QuerySelector"));
var HTMLElementRenderer_1 = __importDefault(require("../../../html-renderer/HTMLElementRenderer"));
var MutationRecord_1 = __importDefault(require("../../../mutation-observer/MutationRecord"));
var MutationType_1 = __importDefault(require("../../../mutation-observer/MutationType"));
var ATTRIBUTE_REGEXP = /([^\s=]+)(?:\s*=\s*(?:"([^"]*)"|'([^']*)'|(\S+)))/gi;
/**
 * Element.
 */
var Element = /** @class */ (function (_super) {
    __extends(Element, _super);
    function Element() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.tagName = null;
        _this.nodeType = NodeType_1.default.ELEMENT_NODE;
        _this.shadowRoot = null;
        _this.classList = new ClassList_1.default(_this);
        _this.scrollTop = 0;
        _this.scrollLeft = 0;
        _this._attributesMap = {};
        _this._useCaseSensitiveAttributes = false;
        return _this;
    }
    Object.defineProperty(Element.prototype, "id", {
        /**
         * Returns ID.
         *
         * @return {string} ID.
         */
        get: function () {
            return this.getAttribute('id');
        },
        /**
         * Sets ID.
         *
         * @param {string} id ID.
         * @return {string} HTML.
         */
        set: function (id) {
            this.setAttribute('id', id);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Element.prototype, "className", {
        /**
         * Returns class name.
         *
         * @return {string} Class name.
         */
        get: function () {
            return this.getAttribute('class');
        },
        /**
         * Sets class name.
         *
         * @param {string} className Class name.
         * @return {string} Class name.
         */
        set: function (className) {
            this.setAttribute('class', className);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Element.prototype, "children", {
        /**
         * Returns children.
         *
         * @return {Element[]} Children.
         */
        get: function () {
            return this.childNodes.filter(function (childNode) { return childNode instanceof Element; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Element.prototype, "nodeName", {
        /**
         * Node name.
         *
         * @return {string} Node name.
         */
        get: function () {
            return this.tagName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Element.prototype, "textContent", {
        /**
         * Get text value of children.
         *
         * @return {string} Text content.
         */
        get: function () {
            var result = '';
            for (var _i = 0, _a = this.childNodes; _i < _a.length; _i++) {
                var childNode = _a[_i];
                if (childNode instanceof Element || childNode instanceof TextNode_1.default) {
                    result += childNode.textContent;
                }
            }
            return result;
        },
        /**
         * Sets text content.
         *
         * @param {string} textContent Text content.
         */
        set: function (textContent) {
            for (var _i = 0, _a = this.childNodes; _i < _a.length; _i++) {
                var child = _a[_i];
                this.removeChild(child);
            }
            this.appendChild(this.ownerDocument.createTextNode(textContent));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Element.prototype, "innerHTML", {
        /**
         * Returns inner HTML.
         *
         * @return {string} HTML.
         */
        get: function () {
            return HTMLElementRenderer_1.default.renderInnerHTML(this);
        },
        /**
         * Sets inner HTML.
         *
         * @param {string} html HTML.
         */
        set: function (html) {
            var root = HTMLParser_1.default.parse(this.ownerDocument, html);
            for (var _i = 0, _a = this.childNodes.slice(); _i < _a.length; _i++) {
                var child = _a[_i];
                this.removeChild(child);
            }
            for (var _b = 0, _c = root.childNodes.slice(); _b < _c.length; _b++) {
                var child = _c[_b];
                this.appendChild(child);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Element.prototype, "outerHTML", {
        /**
         * Returns outer HTML.
         *
         * @return {string} HTML.
         */
        get: function () {
            return HTMLElementRenderer_1.default.renderOuterHTML(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Element.prototype, "attributes", {
        /**
         * Returns attributes.
         *
         * @return {{ [k: string]: Attribute | number }} Attributes.
         */
        get: function () {
            var names = Object.keys(this._attributesMap);
            var attributes = { length: names.length };
            for (var i = 0, max = names.length; i < max; i++) {
                var name = names[i];
                var attribute = new Attribute_1.default();
                attribute.name = name;
                attribute.value = this._attributesMap[name];
                attributes[name] = attribute;
                attributes[i] = attribute;
            }
            return attributes;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns "true" if the node has attributes.
     *
     * @override
     * @return {boolean} "true" if the node has attributes.
     */
    Element.prototype.hasAttributes = function () {
        return Object.keys(this._attributesMap).length > 0;
    };
    /**
     * Sets an attribute.
     *
     * @param {string} name Name.
     * @param {string} value Value.
     */
    Element.prototype.setAttribute = function (name, value) {
        var lowerName = this._useCaseSensitiveAttributes ? name : name.toLowerCase();
        var oldValue = this._attributesMap[lowerName] !== undefined ? this._attributesMap[lowerName] : null;
        this._attributesMap[lowerName] = String(value);
        if (this.attributeChangedCallback) {
            this.attributeChangedCallback(name, oldValue, value);
        }
        // MutationObserver
        if (this._observers.length > 0) {
            for (var _i = 0, _a = this._observers; _i < _a.length; _i++) {
                var observer = _a[_i];
                if (observer.options.attributes &&
                    (!observer.options.attributeFilter || observer.options.attributeFilter.includes(lowerName))) {
                    var record = new MutationRecord_1.default();
                    record.type = MutationType_1.default.attributes;
                    record.attributeName = lowerName;
                    record.oldValue = observer.options.attributeOldValue ? oldValue : null;
                    observer.callback([record]);
                }
            }
        }
    };
    /**
     * Returns attribute value.
     *
     * @param {string} name Name.
     */
    Element.prototype.getAttribute = function (name) {
        var lowerName = this._useCaseSensitiveAttributes ? name : name.toLowerCase();
        return this.hasAttribute(name) ? this._attributesMap[lowerName] : null;
    };
    /**
     * Returns a boolean value indicating whether the specified element has the attribute or not.
     *
     * @param {string} name Attribute name.
     * @returns {boolean} True if attribute exists, false otherwise.
     */
    Element.prototype.hasAttribute = function (name) {
        var lowerName = this._useCaseSensitiveAttributes ? name : name.toLowerCase();
        return this._attributesMap[lowerName] !== undefined;
    };
    /**
     * Removes an attribute.
     *
     * @param {string} name Name.
     */
    Element.prototype.removeAttribute = function (name) {
        var lowerName = this._useCaseSensitiveAttributes ? name : name.toLowerCase();
        var oldValue = this._attributesMap[lowerName] !== undefined ? this._attributesMap[lowerName] : null;
        delete this._attributesMap[lowerName];
        // MutationObserver
        if (this._observers.length > 0) {
            for (var _i = 0, _a = this._observers; _i < _a.length; _i++) {
                var observer = _a[_i];
                if (observer.options.attributes &&
                    (!observer.options.attributeFilter || observer.options.attributeFilter.includes(lowerName))) {
                    var record = new MutationRecord_1.default();
                    record.type = MutationType_1.default.attributes;
                    record.attributeName = lowerName;
                    record.oldValue = observer.options.attributeOldValue ? oldValue : null;
                    observer.callback([record]);
                }
            }
        }
    };
    /**
     * Sets raw attributes.
     *
     * @param {string} rawAttributes Raw attributes.
     */
    Element.prototype._setRawAttributes = function (rawAttributes) {
        rawAttributes = rawAttributes.trim();
        if (rawAttributes) {
            var regExp = new RegExp(ATTRIBUTE_REGEXP, 'gi');
            var match = void 0;
            // Attributes with value
            while ((match = regExp.exec(rawAttributes))) {
                var name = this._useCaseSensitiveAttributes ? match[1] : match[1].toLowerCase();
                this._attributesMap[name] = he_1.decode(match[2] || match[3] || match[4] || '');
            }
            // Attributes with no value
            for (var _i = 0, _a = rawAttributes
                .replace(ATTRIBUTE_REGEXP, '')
                .trim()
                .split(' '); _i < _a.length; _i++) {
                var name = _a[_i];
                var lowerName = this._useCaseSensitiveAttributes ? name.trim() : name.trim().toLowerCase();
                this._attributesMap[lowerName] = '';
            }
        }
    };
    /**
     * Returns raw attributes.
     *
     * @returns {string} Raw attributes.
     */
    Element.prototype._getRawAttributes = function () {
        var attributes = [];
        for (var _i = 0, _a = Object.keys(this._attributesMap); _i < _a.length; _i++) {
            var name = _a[_i];
            if (this._attributesMap[name]) {
                attributes.push(name + '="' + he_1.encode(this._attributesMap[name]) + '"');
            }
        }
        return attributes.join(' ');
    };
    /**
     * Attaches a shadow root.
     *
     * @return {ShadowRoot} Shadow root.
     */
    Element.prototype.attachShadow = function () {
        if (this.shadowRoot) {
            throw new Error('Shadow root has already been attached.');
        }
        this.shadowRoot = new ShadowRoot_1.default();
        this.shadowRoot.ownerDocument = this.ownerDocument;
        this.shadowRoot.isConnected = this.isConnected;
        return this.shadowRoot;
    };
    /**
     * Scrolls to a particular set of coordinates in the document.
     *
     * @note This method has not been implemented. It is just here for compatibility.
     */
    Element.prototype.scrollTo = function () { };
    /**
     * Converts to string.
     *
     * @return {string} String.
     */
    Element.prototype.toString = function () {
        return this.outerHTML;
    };
    /**
     * Returns the size of an element and its position relative to the viewport.
     *
     * @return {DOMRect} DOM rect.
     */
    Element.prototype.getBoundingClientRect = function () {
        return new DOMRect_1.default();
    };
    /**
     * Returns a range.
     *
     * @return {Range} Range.
     */
    Element.prototype.createTextRange = function () {
        return new Range_1.default();
    };
    /**
     * Query CSS selector to find matching nodes.
     *
     * @param {string} selector CSS selector.
     * @return {Element[]} Matching elements.
     */
    Element.prototype.querySelectorAll = function (selector) {
        return QuerySelector_1.default.querySelectorAll(this, selector);
    };
    /**
     * Query CSS Selector to find matching node.
     *
     * @param {string} selector CSS selector.
     * @return {Element} Matching node.
     */
    Element.prototype.querySelector = function (selector) {
        return QuerySelector_1.default.querySelector(this, selector);
    };
    /**
     * Returns an elements by tag name.
     *
     * @param {string} tagName Tag name.
     * @return {Element[]} Matching nodes.
     */
    Element.prototype.getElementsByTagName = function (tagName) {
        return this.querySelectorAll(tagName);
    };
    /**
     * Returns an elements by class name.
     *
     * @param {string} className Tag name.
     * @return {Element[]} Matching nodes.
     */
    Element.prototype.getElementsByClassName = function (className) {
        return this.querySelectorAll('.' + className.split(' ').join('.'));
    };
    return Element;
}(Node_1.default));
exports.default = Element;
//# sourceMappingURL=Element.js.map