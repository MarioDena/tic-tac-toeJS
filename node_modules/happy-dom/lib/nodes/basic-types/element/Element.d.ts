import Node from '../node/Node';
import NodeType from '../node/NodeType';
import ShadowRoot from '../shadow-root/ShadowRoot';
import Attribute from './Attribute';
import DOMRect from './DOMRect';
import Range from './Range';
import ClassList from './ClassList';
/**
 * Element.
 */
export default class Element extends Node {
    tagName: string;
    nodeType: NodeType;
    shadowRoot: ShadowRoot;
    classList: ClassList;
    scrollTop: number;
    scrollLeft: number;
    _attributesMap: {
        [k: string]: string;
    };
    _useCaseSensitiveAttributes: boolean;
    /**
     * Returns ID.
     *
     * @return {string} ID.
     */
    /**
    * Sets ID.
    *
    * @param {string} id ID.
    * @return {string} HTML.
    */
    id: string;
    /**
     * Returns class name.
     *
     * @return {string} Class name.
     */
    /**
    * Sets class name.
    *
    * @param {string} className Class name.
    * @return {string} Class name.
    */
    className: string;
    /**
     * Returns children.
     *
     * @return {Element[]} Children.
     */
    readonly children: Element[];
    /**
     * Node name.
     *
     * @return {string} Node name.
     */
    readonly nodeName: string;
    /**
     * Get text value of children.
     *
     * @return {string} Text content.
     */
    /**
    * Sets text content.
    *
    * @param {string} textContent Text content.
    */
    textContent: string;
    /**
     * Returns inner HTML.
     *
     * @return {string} HTML.
     */
    /**
    * Sets inner HTML.
    *
    * @param {string} html HTML.
    */
    innerHTML: string;
    /**
     * Returns outer HTML.
     *
     * @return {string} HTML.
     */
    readonly outerHTML: string;
    /**
     * Returns attributes.
     *
     * @return {{ [k: string]: Attribute | number }} Attributes.
     */
    readonly attributes: {
        [k: string]: Attribute | number;
    };
    /**
     * Attribute changed callback.
     *
     * @param {string} name Name.
     * @param {string} oldValue Old value.
     * @param {string} newValue New value.
     */
    attributeChangedCallback?(name: string, oldValue: string, newValue: string): void;
    /**
     * Returns "true" if the node has attributes.
     *
     * @override
     * @return {boolean} "true" if the node has attributes.
     */
    hasAttributes(): boolean;
    /**
     * Sets an attribute.
     *
     * @param {string} name Name.
     * @param {string} value Value.
     */
    setAttribute(name: string, value: string): void;
    /**
     * Returns attribute value.
     *
     * @param {string} name Name.
     */
    getAttribute(name: string): string;
    /**
     * Returns a boolean value indicating whether the specified element has the attribute or not.
     *
     * @param {string} name Attribute name.
     * @returns {boolean} True if attribute exists, false otherwise.
     */
    hasAttribute(name: string): boolean;
    /**
     * Removes an attribute.
     *
     * @param {string} name Name.
     */
    removeAttribute(name: string): void;
    /**
     * Sets raw attributes.
     *
     * @param {string} rawAttributes Raw attributes.
     */
    _setRawAttributes(rawAttributes: string): void;
    /**
     * Returns raw attributes.
     *
     * @returns {string} Raw attributes.
     */
    _getRawAttributes(): string;
    /**
     * Attaches a shadow root.
     *
     * @return {ShadowRoot} Shadow root.
     */
    attachShadow(): ShadowRoot;
    /**
     * Scrolls to a particular set of coordinates in the document.
     *
     * @note This method has not been implemented. It is just here for compatibility.
     */
    scrollTo(): void;
    /**
     * Converts to string.
     *
     * @return {string} String.
     */
    toString(): string;
    /**
     * Returns the size of an element and its position relative to the viewport.
     *
     * @return {DOMRect} DOM rect.
     */
    getBoundingClientRect(): DOMRect;
    /**
     * Returns a range.
     *
     * @return {Range} Range.
     */
    createTextRange(): Range;
    /**
     * Query CSS selector to find matching nodes.
     *
     * @param {string} selector CSS selector.
     * @return {Element[]} Matching elements.
     */
    querySelectorAll(selector: string): Element[];
    /**
     * Query CSS Selector to find matching node.
     *
     * @param {string} selector CSS selector.
     * @return {Element} Matching node.
     */
    querySelector(selector: string): Element;
    /**
     * Returns an elements by tag name.
     *
     * @param {string} tagName Tag name.
     * @return {Element[]} Matching nodes.
     */
    getElementsByTagName(tagName: string): Element[];
    /**
     * Returns an elements by class name.
     *
     * @param {string} className Tag name.
     * @return {Element[]} Matching nodes.
     */
    getElementsByClassName(className: string): Element[];
}
