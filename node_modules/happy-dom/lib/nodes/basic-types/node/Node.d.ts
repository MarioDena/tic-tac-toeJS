import NodeType from './NodeType';
import Document from '../document/Document';
import EventTarget from '../../../event/EventTarget';
import MutationObserverListener from '../../../mutation-observer/MutationListener';
import Event from '../../../event/Event';
/**
 * Node
 */
export default class Node extends EventTarget {
    static ownerDocument: Document;
    ownerDocument: Document;
    parentNode: Node;
    readonly nodeType: NodeType;
    readonly childNodes: Node[];
    protected _isConnected: boolean;
    protected _observers: MutationObserverListener[];
    /**
     * Constructor.
     */
    constructor();
    /**
     * "true" if connected to DOM.
     *
     * @return {boolean} "true" if connected.
     */
    /**
    * Sets the connected state.
    *
    * @param {boolean} isConnected "true" if connected.
    */
    isConnected: boolean;
    /**
     * Node value.
     *
     * @return {string} Node value.
     */
    readonly nodeValue: string;
    /**
     * Node name.
     *
     * @return {string} Node name.
     */
    readonly nodeName: string;
    /**
     * Previous sibling.
     *
     * @return {Node} Node.
     */
    readonly previousSibling: Node;
    /**
     * Next sibling.
     *
     * @return {Node} Node.
     */
    readonly nextSibling: Node;
    /**
     * Previous element sibling.
     *
     * @return {Node} Node.
     */
    readonly previousElementSibling: Node;
    /**
     * Next element sibling.
     *
     * @return {Node} Node.
     */
    readonly nextElementSibling: Node;
    /**
     * First child.
     *
     * @return {Node} Node.
     */
    readonly firstChild: Node;
    /**
     * Last child.
     *
     * @return {Node} Node.
     */
    readonly lastChild: Node;
    /**
     * First element child.
     *
     * @return {Node} Node.
     */
    readonly firstElementChild: Node;
    /**
     * Last element child.
     *
     * @return {Node} Node.
     */
    readonly lastElementChild: Node;
    /**
     * Connected callback.
     */
    connectedCallback?(): void;
    /**
     * Disconnected callback.
     */
    disconnectedCallback?(): void;
    /**
     * Returns "true" if the node has attributes.
     *
     * @return {boolean} "true" if the node has attributes.
     */
    hasAttributes(): boolean;
    /**
     * Clones a node.
     *
     * @param {boolean} [deep=true] "false" to not clone deep.
     * @return {Node} Cloned node.
     */
    cloneNode(deep?: boolean): Node;
    /**
     * Inserts nodes before the first child of node, while replacing strings in nodes with equivalent Text nodes.
     */
    prepend(...nodes: (Node | string)[]): void;
    /**
     * Inserts nodes after the last child of node, while replacing strings in nodes with equivalent Text nodes.
     */
    append(...nodes: (Node | string)[]): void;
    /**
     * Append a child node to childNodes.
     *
     * @param  {Node} node Node to append.
     * @return {Node} Appended node.
     */
    appendChild(node: Node): Node;
    /**
     * Removes the node from its parent.
     */
    remove(): void;
    /**
     * Remove Child element from childNodes array.
     *
     * @param {Node} node Node to remove
     */
    removeChild(node: Node): void;
    /**
     * Inserts a node before another.
     *
     * @param {Node} newNode Node to insert.
     * @param {Node} referenceNode Node to insert before.
     * @return {Node} Inserted node.
     */
    insertBefore(newNode: Node, referenceNode: Node): Node;
    /**
     * Replaces a node with another.
     *
     * @param {Node} newChild New child.
     * @param {Node} oldChild Old child.
     * @return {Node} Replaced node.
     */
    replaceChild(newChild: Node, oldChild: Node): Node;
    /**
     * Dispatches an event.
     *
     * @override
     * @param {Event} event Event.
     * @return {boolean} The return value is false if event is cancelable and at least one of the event handlers which handled this event called Event.preventDefault()
     */
    dispatchEvent(event: Event): boolean;
    /**
     * Observeres the node.
     * Used by MutationObserver, but it is not part of the HTML standard.
     *
     * @param {MutationObserverListener} listener Listener.
     */
    _observe(listener: MutationObserverListener): void;
    /**
     * Stops observing the node.
     * Used by MutationObserver, but it is not part of the HTML standard.
     *
     * @param {MutationObserverListener} listener Listener.
     */
    _unobserve(listener: MutationObserverListener): void;
}
