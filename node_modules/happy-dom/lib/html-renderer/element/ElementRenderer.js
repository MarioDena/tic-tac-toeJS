"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Element_1 = __importDefault(require("../../nodes/basic/element/Element"));
var HTMLRenderResult_1 = __importDefault(require("../HTMLRenderResult"));
var SELF_CLOSED_REGEXP = /^(img|br|hr|area|base|input|doctype|link)$/i;
var META_REGEXP = /^meta$/i;
/**
 * Utility for converting an element to string.
 *
 * @class QuerySelector
 */
var ElementRenderer = /** @class */ (function () {
    function ElementRenderer() {
    }
    /**
     * Renders an element as HTML.
     *
     * @param {Element} element Element to render.
     * @return {HTMLRenderResult} Result.
     */
    ElementRenderer.prototype.getOuterHTML = function (element) {
        var tagName = element.tagName.toLowerCase();
        var isUnClosed = META_REGEXP.test(tagName);
        var isSelfClosed = SELF_CLOSED_REGEXP.test(tagName);
        var result = new HTMLRenderResult_1.default();
        if (isUnClosed) {
            result.html = "<" + tagName + this.getAttributes(element) + ">";
        }
        else if (isSelfClosed) {
            result.html = "<" + tagName + this.getAttributes(element) + "/>";
        }
        else {
            result.html = "<" + tagName + this.getAttributes(element) + ">" + element.innerHTML + "</" + tagName + ">";
        }
        return result;
    };
    /**
     * Renders an element as HTML.
     *
     * @param {Element} element Element to render.
     * @return {HTMLRenderResult} Result.
     */
    ElementRenderer.prototype.getInnerHTML = function (element) {
        var result = new HTMLRenderResult_1.default();
        var renderElement = element.content || element;
        for (var _i = 0, _a = renderElement.childNodes.slice(); _i < _a.length; _i++) {
            var child = _a[_i];
            if (child instanceof Element_1.default) {
                result.html += child.outerHTML;
            }
            else {
                result.html += child.toString();
            }
        }
        return result;
    };
    /**
     * Returns attributes as a string.
     *
     * @param {Element} element Element.
     * @return {string} Attributes.
     */
    ElementRenderer.prototype.getAttributes = function (element) {
        var rawAttributes = element._getRawAttributes();
        return rawAttributes ? ' ' + rawAttributes : '';
    };
    return ElementRenderer;
}());
exports.default = ElementRenderer;
//# sourceMappingURL=ElementRenderer.js.map