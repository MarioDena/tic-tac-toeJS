"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var css_tree_1 = __importDefault(require("css-tree"));
/**
 * Utility for scoping CSS inside a shadow root.
 */
var StyleScoper = /** @class */ (function () {
    function StyleScoper() {
    }
    /**
     * Scopes CSS.
     *
     * @param {string} css CSS code.
     * @param {string} id Unique id to use.
     * @param {string} tagName Tag name.
     * @return {string} Scoped CSS.
     */
    StyleScoper.scope = function (css, id, tagName) {
        var ast = css_tree_1.default.parse(css);
        var walked = [];
        css_tree_1.default.walk(ast, function (node, item, list) {
            if (!walked.includes(item)) {
                if (node.type === 'PseudoClassSelector' && node.name === 'host') {
                    var newItem = list.createItem({
                        type: 'TypeSelector',
                        name: tagName.toLowerCase()
                    });
                    node.type = 'ClassSelector';
                    node.name = id;
                    list.insert(newItem, item);
                    walked.push(item);
                    if (node.children && node.children.head.data.type === 'Raw') {
                        if (node.children.head.data.value.includes('(')) {
                            var value = node.children.head.data.value
                                .replace(':', '')
                                .replace(')', '')
                                .split('(');
                            var newAttributeSelector = list.createItem({
                                flags: null,
                                loc: null,
                                type: 'AttributeSelector',
                                name: {
                                    loc: null,
                                    type: 'Identifier',
                                    name: value[0]
                                },
                                matcher: '=',
                                value: {
                                    loc: null,
                                    type: 'String',
                                    value: '"' + value[1] + '"'
                                }
                            });
                            var whiteSpaceItem = list.createItem({
                                type: 'WhiteSpace',
                                value: ' '
                            });
                            list.prepend(whiteSpaceItem);
                            list.prepend(newAttributeSelector);
                        }
                    }
                }
                else if (node.type === 'TypeSelector' && node.name === '*') {
                    node.type = 'ClassSelector';
                    node.name = id;
                }
                else if (node.type === 'AttributeSelector') {
                    var newItem = list.createItem({
                        type: 'ClassSelector',
                        name: id
                    });
                    list.insert(newItem, item);
                    walked.push(item);
                }
                else if (node.type === 'ClassSelector' || node.type === 'TypeSelector') {
                    var newItem = list.createItem({
                        type: 'ClassSelector',
                        name: id
                    });
                    if (item.next) {
                        list.insert(newItem, item.next);
                    }
                    else {
                        list.append(newItem);
                    }
                    walked.push(newItem);
                }
            }
        });
        return css_tree_1.default.generate(ast);
    };
    return StyleScoper;
}());
exports.default = StyleScoper;
//# sourceMappingURL=StyleScoper.js.map