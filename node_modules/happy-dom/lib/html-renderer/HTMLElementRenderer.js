"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Element_1 = __importDefault(require("../nodes/basic-types/element/Element"));
var ScopedCSSCache_1 = __importDefault(require("../shadow-root-renderer/css/ScopedCSSCache"));
var ShadowRootRenderer_1 = __importDefault(require("../shadow-root-renderer/ShadowRootRenderer"));
var SelfClosingElements_json_1 = __importDefault(require("../html-config/SelfClosingElements.json"));
var SelfClosingSVGElements_json_1 = __importDefault(require("../html-config/SelfClosingSVGElements.json"));
var UnclosedElements_json_1 = __importDefault(require("../html-config/UnclosedElements.json"));
/**
 * Utility for converting an element to string.
 *
 * @class QuerySelector
 */
var HTMLElementRenderer = /** @class */ (function () {
    function HTMLElementRenderer() {
    }
    /**
     * Renders an element as HTML.
     *
     * @param {Element} element Element to convert.
     * @return {string} HTML.
     */
    HTMLElementRenderer.renderOuterHTML = function (element) {
        var tagName = element.tagName.toLowerCase();
        var rawAttributes = element._getRawAttributes();
        var attributes = rawAttributes ? ' ' + rawAttributes : '';
        var result = '';
        if (UnclosedElements_json_1.default.includes(tagName)) {
            result = "<" + tagName + attributes + ">";
        }
        else if (SelfClosingElements_json_1.default.includes(tagName) || SelfClosingSVGElements_json_1.default.includes(tagName)) {
            result = "<" + tagName + attributes + " />";
        }
        else {
            result = "<" + tagName + attributes + ">" + element.innerHTML + "</" + tagName + ">";
        }
        return result;
    };
    /**
     * Renders an element as HTML.
     *
     * @param {Element|ShadowRoot} element Element to convert.
     * @return {string} HTML.
     */
    HTMLElementRenderer.renderInnerHTML = function (element) {
        var renderOptions = element.ownerDocument.defaultView.shadowRootRenderOptions;
        var cssCache = renderOptions.cssCache;
        var renderElement = element.content || element;
        var result = '';
        if (renderOptions.openShadowRoots && element instanceof Element_1.default && element.shadowRoot) {
            return ShadowRootRenderer_1.default.getInnerHTML(element, cssCache);
        }
        for (var _i = 0, _a = renderElement.childNodes.slice(); _i < _a.length; _i++) {
            var child = _a[_i];
            if (child instanceof Element_1.default) {
                result += child.outerHTML;
            }
            else {
                result += child.toString();
            }
        }
        if (renderOptions.openShadowRoots &&
            renderOptions.appendScopedCSSToHead &&
            element === element.ownerDocument.documentElement) {
            result = result.replace('</head>', "<style>" + cssCache.getAllScopedCSS() + "</style></head>");
        }
        return result;
    };
    HTMLElementRenderer.shadowRootCSSCache = new ScopedCSSCache_1.default();
    return HTMLElementRenderer;
}());
exports.default = HTMLElementRenderer;
//# sourceMappingURL=HTMLElementRenderer.js.map