"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Handles async tasks.
 */
var AsyncTaskManager = /** @class */ (function () {
    function AsyncTaskManager() {
        // Private Properties
        this.isDisposed = false;
        this.tasks = {};
        this.hasError = false;
        this.timeout = null;
        this.queue = [];
    }
    /**
     * Returns a promise that is fulfilled when async tasks are complete.
     * This method is not part of the HTML standard.
     *
     * @return {Promise<void>} Promise.
     */
    AsyncTaskManager.prototype.whenComplete = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.startTask('complete');
                        _this.queue.push({ resolve: resolve, reject: reject });
                        global.clearTimeout(_this.timeout);
                        _this.timeout = global.setTimeout(function () { return _this.endTask('complete'); }, 0);
                    })];
            });
        });
    };
    /**
     * Disposes the window.
     */
    AsyncTaskManager.prototype.dispose = function () {
        this.isDisposed = true;
        this.hasError = false;
        this.tasks = {};
        this.queue = [];
        global.clearTimeout(this.timeout);
    };
    /**
     * Starts an async task.
     *
     * @param {string} name Name of task.
     */
    AsyncTaskManager.prototype.startTask = function (name) {
        this.tasks[name] = this.tasks[name] || 0;
        this.tasks[name]++;
    };
    /**
     * Ends an async task.
     *
     * @param {string} name Name of task.
     * @param {Error} [error] Error.
     */
    AsyncTaskManager.prototype.endTask = function (name, error) {
        if (!this.isDisposed && this.tasks[name] !== undefined) {
            this.tasks[name]--;
            var promises = this.queue;
            if (error) {
                this.hasError = true;
                this.queue = [];
                for (var _i = 0, promises_1 = promises; _i < promises_1.length; _i++) {
                    var promise = promises_1[_i];
                    promise.reject(error);
                }
            }
            else if (this.tasks[name] === 0 && !this.hasError) {
                delete this.tasks[name];
                if (Object.keys(this.tasks).length === 0) {
                    this.queue = [];
                    for (var _a = 0, promises_2 = promises; _a < promises_2.length; _a++) {
                        var promise = promises_2[_a];
                        promise.resolve();
                    }
                }
            }
        }
    };
    return AsyncTaskManager;
}());
exports.default = AsyncTaskManager;
//# sourceMappingURL=AsyncTaskManager.js.map