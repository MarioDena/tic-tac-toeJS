"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Element_1 = __importDefault(require("../nodes/basic-types/element/Element"));
var SelectorItem_1 = __importDefault(require("./SelectorItem"));
/**
 * Utility for query selection in a Node.
 *
 * @class QuerySelector
 */
var QuerySelector = /** @class */ (function () {
    function QuerySelector() {
    }
    /**
     * Finds elements based on a query selector.
     *
     * @param {string} node Node to search in.
     * @param {string} selector Selector.
     * @return {Element[]} HTML elements.
     */
    QuerySelector.querySelectorAll = function (node, selector) {
        var matched = [];
        for (var _i = 0, _a = selector.split(','); _i < _a.length; _i++) {
            var part = _a[_i];
            var foundElements = this.querySelectorAllForPart(node, part.trim());
            if (foundElements) {
                matched = matched.concat(foundElements);
            }
        }
        return matched;
    };
    /**
     * Finds an element based on a query selector.
     *
     * @param {string} node Node to search in.
     * @param {string} selector Selector.
     * @return {Element} HTML element.
     */
    QuerySelector.querySelector = function (node, selector) {
        for (var _i = 0, _a = selector.split(','); _i < _a.length; _i++) {
            var part = _a[_i];
            var foundElement = this.querySelectorForPart(node, part.trim());
            if (foundElement) {
                return foundElement;
            }
        }
        return null;
    };
    /**
     * Finds elements based on a query selector for a part of a list of selectors separated with comma.
     *
     * @param {string} node Node to search in.
     * @param {string} selector Selector.
     * @return {Element[]} HTML elements.
     */
    QuerySelector.querySelectorAllForPart = function (node, selector) {
        var parts = selector.split(' ');
        var current = new SelectorItem_1.default(parts[0]);
        var matched = [];
        for (var _i = 0, _a = node.childNodes; _i < _a.length; _i++) {
            var child = _a[_i];
            if (child instanceof Element_1.default) {
                if (current.match(child)) {
                    if (parts.length === 1) {
                        matched.push(child);
                    }
                    else {
                        matched = matched.concat(this.querySelectorAll(child, parts.slice(1).join(' ')));
                    }
                }
                else {
                    matched = matched.concat(this.querySelectorAll(child, selector));
                }
            }
        }
        return matched;
    };
    /**
     * Finds an element based on a query selector for a part of a list of selectors separated with comma.
     *
     * @param {string} node Node to search in.
     * @param {string} selector Selector.
     * @return {Element} HTML element.
     */
    QuerySelector.querySelectorForPart = function (node, selector) {
        var parts = selector.split(' ');
        var current = new SelectorItem_1.default(parts.shift());
        for (var _i = 0, _a = node.childNodes; _i < _a.length; _i++) {
            var child = _a[_i];
            if (child instanceof Element_1.default) {
                if (current.match(child)) {
                    if (parts.length === 0) {
                        return child;
                    }
                    else {
                        return this.querySelector(child, parts.join(' '));
                    }
                }
                var childSelector = this.querySelector(child, selector);
                if (childSelector) {
                    return childSelector;
                }
            }
        }
        return null;
    };
    return QuerySelector;
}());
exports.default = QuerySelector;
//# sourceMappingURL=QuerySelector.js.map