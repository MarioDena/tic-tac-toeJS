"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Element_1 = __importDefault(require("../../nodes/basic/element/Element"));
var ShadowRootScoper_1 = __importDefault(require("./ShadowRootScoper"));
var ShadowRootRenderResult_1 = __importDefault(require("./ShadowRootRenderResult"));
var SelfClosingElements_1 = __importDefault(require("../../html-config/SelfClosingElements"));
var UnclosedElements_1 = __importDefault(require("../../html-config/UnclosedElements"));
/**
 * Utility for converting an element to string.
 *
 * @class QuerySelector
 */
var ShadowRootRenderer = /** @class */ (function () {
    /**
     * Renders an element as HTML.
     *
     * @param [renderOptions] Render this.renderOptions.
     */
    function ShadowRootRenderer(renderOptions) {
        if (renderOptions === void 0) { renderOptions = {}; }
        this.renderOptions = renderOptions;
        this.shadowRootScoper = new ShadowRootScoper_1.default(renderOptions);
    }
    /**
     * Renders an element as HTML.
     *
     * @param element Element to render.
     * @return Result.
     */
    ShadowRootRenderer.prototype.getOuterHTML = function (element) {
        var tagName = element.tagName.toLowerCase();
        var result = new ShadowRootRenderResult_1.default();
        if (UnclosedElements_1.default.includes(tagName)) {
            result.html = "<" + tagName + this.getAttributes(element) + ">";
        }
        else if (SelfClosingElements_1.default.includes(tagName)) {
            result.html = "<" + tagName + this.getAttributes(element) + "/>";
        }
        else {
            var innerElement = element;
            var outerElement = element;
            if (this.renderOptions.openShadowRoots && element instanceof Element_1.default && element.shadowRoot) {
                outerElement = this.shadowRootScoper.getScopedClone(element);
                innerElement = outerElement.shadowRoot;
            }
            var innerHTML = this.getInnerHTML(innerElement).html;
            result.html = "<" + tagName + this.getAttributes(outerElement) + ">" + innerHTML + "</" + tagName + ">";
        }
        if (this.renderOptions.openShadowRoots) {
            result.css = this.shadowRootScoper.getScopedCSS();
        }
        return result;
    };
    /**
     * Renders an element as HTML.
     *
     * @param element Element to render.
     * @return Result.
     */
    ShadowRootRenderer.prototype.getInnerHTML = function (element) {
        var result = new ShadowRootRenderResult_1.default();
        var renderElement = element.content || element;
        for (var _i = 0, _a = renderElement.childNodes.slice(); _i < _a.length; _i++) {
            var child = _a[_i];
            if (child instanceof Element_1.default) {
                result.html += this.getOuterHTML(child).html;
            }
            else {
                result.html += child.toString();
            }
        }
        if (this.renderOptions.openShadowRoots) {
            result.css = this.shadowRootScoper.getScopedCSS();
        }
        return result;
    };
    /**
     * Returns attributes as a string.
     *
     * @param element Element.
     * @return Attributes.
     */
    ShadowRootRenderer.prototype.getAttributes = function (element) {
        var rawAttributes = element._getRawAttributes();
        return rawAttributes ? ' ' + rawAttributes : '';
    };
    return ShadowRootRenderer;
}());
exports.default = ShadowRootRenderer;
//# sourceMappingURL=ShadowRootRenderer.js.map