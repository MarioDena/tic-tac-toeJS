"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var vm_1 = __importDefault(require("vm"));
var AsyncWindow_1 = __importDefault(require("../../window/AsyncWindow"));
var ShadowRootRenderer_1 = __importDefault(require("../shadow-root/ShadowRootRenderer"));
/**
 * This class is used for rendering a script server side.
 */
var VMContext = /** @class */ (function () {
    function VMContext() {
        this.context = this.createContext();
    }
    /**
     * Returns route HTML.
     *
     * @param options Options.
     * @param options.html HTML.
     * @param [options.script] Script.
     * @param [options.url] Page URL.
     * @param [options.openShadowRoots=false] Set to "true" to open up shadow roots.
     * @param [options.extractCSS=true] Set to "true" to extract CSS when opening shadow roots.
     * @param [options.scopeCSS=true] Set to "true" to enable scoping of CSS when opening shadow roots.
     * @return HTML.
     */
    VMContext.prototype.render = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var window = _this.context.window;
                        var document = _this.context.document;
                        var renderer = new ShadowRootRenderer_1.default({
                            openShadowRoots: options.openShadowRoots,
                            extractCSS: options.extractCSS,
                            scopeCSS: options.scopeCSS
                        });
                        window
                            .whenAsyncComplete()
                            .then(function () { return resolve(renderer.getOuterHTML(document.documentElement)); })
                            .catch(reject);
                        if (options.url) {
                            window.location.href = options.url;
                        }
                        options.script.runInContext(_this.context);
                        document.write(options.html);
                    })];
            });
        });
    };
    /**
     * Disposes the render.
     */
    VMContext.prototype.dispose = function () {
        this.context.window.dispose();
        this.context.dispose();
    };
    /**
     * Creates a context.
     *
     * @return Context.
     */
    VMContext.prototype.createContext = function () {
        return vm_1.default.createContext(new AsyncWindow_1.default());
    };
    return VMContext;
}());
exports.default = VMContext;
//# sourceMappingURL=VMContext.js.map