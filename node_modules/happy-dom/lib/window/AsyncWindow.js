"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var node_fetch_1 = require("node-fetch");
var Window_1 = __importDefault(require("./Window"));
var AsyncTaskManager_1 = __importDefault(require("./AsyncTaskManager"));
var FETCH_RESPONSE_TYPE_METHODS = ['blob', 'json', 'formData', 'text'];
/**
 * Handles the Window.
 */
var AsyncWindow = /** @class */ (function (_super) {
    __extends(AsyncWindow, _super);
    /**
     * Constructor.
     */
    function AsyncWindow() {
        var _this = _super.call(this) || this;
        // Private Properties
        _this.async = new AsyncTaskManager_1.default();
        // Binds all methods to "this", so that it will use the correct context when called globally.
        for (var _i = 0, _a = Object.keys(AsyncWindow.prototype); _i < _a.length; _i++) {
            var key = _a[_i];
            if (typeof _this[key] === 'function') {
                _this[key] = _this[key].bind(_this);
            }
        }
        return _this;
    }
    /**
     * Sets a timer which executes a function once the timer expires.
     *
     * @param callback Function to be executed.
     * @param [delay] Delay in ms.
     * @return Timeout ID.
     */
    AsyncWindow.prototype.setTimeout = function (callback, delay) {
        var _this = this;
        this.async.startTask('timeout');
        return global.setTimeout(function () {
            callback();
            _this.async.endTask('timeout');
        }, delay);
    };
    /**
     * Cancels a timeout previously established by calling setTimeout().
     *
     * @param id ID of the timeout.
     */
    AsyncWindow.prototype.clearTimeout = function (id) {
        global.clearTimeout(id);
        this.async.endTask('timeout');
    };
    /**
     * Calls a function with a fixed time delay between each call.
     *
     * @param callback Function to be executed.
     * @param [delay] Delay in ms.
     * @return Interval ID.
     */
    AsyncWindow.prototype.setInterval = function (callback, delay) {
        this.async.startTask('interval');
        return global.setInterval(callback, delay);
    };
    /**
     * Cancels a timed repeating action which was previously established by a call to setInterval().
     *
     * @param id ID of the interval.
     */
    AsyncWindow.prototype.clearInterval = function (id) {
        global.clearInterval(id);
        this.async.endTask('interval');
    };
    /**
     * Mock animation frames with timeouts.
     *
     * @override
     * @param {function} callback Callback.
     * @returns {NodeJS.Timeout} Timeout ID.
     */
    AsyncWindow.prototype.requestAnimationFrame = function (callback) {
        return this.setTimeout(function () { callback(2); }, 0);
    };
    /**
     * Mock animation frames with timeouts.
     *
     * @override
     * @param {NodeJS.Timeout} id Timeout ID.
     */
    AsyncWindow.prototype.cancelAnimationFrame = function (id) {
        this.clearTimeout(id);
    };
    /**
     * Provides a global fetch() method that provides an easy, logical way to fetch resources asynchronously across the network.
     *
     * @param url URL to resource.
     * @param [options] Options.
     * @returns Promise.
     */
    AsyncWindow.prototype.fetch = function (url, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.async.startTask('fetch');
                        node_fetch_1.fetch(url, options)
                            .then(function (response) {
                            var _loop_1 = function (methodName) {
                                var asyncMethod = response[methodName];
                                response[methodName] = function () {
                                    return new Promise(function (resolve, reject) {
                                        _this.async.startTask('fetch');
                                        asyncMethod
                                            .then(function (response) {
                                            resolve(response);
                                            _this.async.endTask('fetch');
                                        })
                                            .catch(function (error) {
                                            reject(error);
                                            _this.async.endTask('fetch', error);
                                        });
                                    });
                                };
                            };
                            for (var _i = 0, FETCH_RESPONSE_TYPE_METHODS_1 = FETCH_RESPONSE_TYPE_METHODS; _i < FETCH_RESPONSE_TYPE_METHODS_1.length; _i++) {
                                var methodName = FETCH_RESPONSE_TYPE_METHODS_1[_i];
                                _loop_1(methodName);
                            }
                            resolve(response);
                            _this.async.endTask('fetch');
                        })
                            .catch(function (error) {
                            reject(error);
                            _this.async.endTask('fetch', error);
                        });
                    })];
            });
        });
    };
    /**
     * Returns a promise that is fulfilled when async tasks are complete.
     * This method is not part of the HTML standard.
     *
     * @returns Promise.
     */
    AsyncWindow.prototype.whenAsyncComplete = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.async.whenComplete()];
            });
        });
    };
    /**
     * Disposes the window.
     */
    AsyncWindow.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.async.dispose();
        this.async = null;
    };
    return AsyncWindow;
}(Window_1.default));
exports.default = AsyncWindow;
//# sourceMappingURL=AsyncWindow.js.map