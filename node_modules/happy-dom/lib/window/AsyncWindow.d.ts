/// <reference types="node" />
import { Response } from 'node-fetch';
import Window from './Window';
/**
 * Handles the Window.
 */
export default class AsyncWindow extends Window {
    private async;
    /**
     * Constructor.
     */
    constructor();
    /**
     * Sets a timer which executes a function once the timer expires.
     *
     * @param callback Function to be executed.
     * @param [delay] Delay in ms.
     * @return Timeout ID.
     */
    setTimeout(callback: () => void, delay?: number): NodeJS.Timeout;
    /**
     * Cancels a timeout previously established by calling setTimeout().
     *
     * @param id ID of the timeout.
     */
    clearTimeout(id: NodeJS.Timeout): void;
    /**
     * Calls a function with a fixed time delay between each call.
     *
     * @param callback Function to be executed.
     * @param [delay] Delay in ms.
     * @return Interval ID.
     */
    setInterval(callback: () => void, delay?: number): NodeJS.Timeout;
    /**
     * Cancels a timed repeating action which was previously established by a call to setInterval().
     *
     * @param id ID of the interval.
     */
    clearInterval(id: NodeJS.Timeout): void;
    /**
     * Mock animation frames with timeouts.
     *
     * @override
     * @param {function} callback Callback.
     * @returns {NodeJS.Timeout} Timeout ID.
     */
    requestAnimationFrame(callback: (timestamp: number) => void): NodeJS.Timeout;
    /**
     * Mock animation frames with timeouts.
     *
     * @override
     * @param {NodeJS.Timeout} id Timeout ID.
     */
    cancelAnimationFrame(id: any): void;
    /**
     * Provides a global fetch() method that provides an easy, logical way to fetch resources asynchronously across the network.
     *
     * @param url URL to resource.
     * @param [options] Options.
     * @returns Promise.
     */
    fetch(url: string, options: object): Promise<Response>;
    /**
     * Returns a promise that is fulfilled when async tasks are complete.
     * This method is not part of the HTML standard.
     *
     * @returns Promise.
     */
    whenAsyncComplete(): Promise<void>;
    /**
     * Disposes the window.
     */
    dispose(): void;
}
